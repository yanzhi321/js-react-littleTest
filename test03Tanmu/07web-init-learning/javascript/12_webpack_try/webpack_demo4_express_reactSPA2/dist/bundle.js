!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===v&&k()}(e,n),t&&t(e,n)};var n,r=!0,o="cbb73d685c167e2b4e6f",a=1e4,i={},u=[],l=[];function c(e){var t=T[e];if(!t)return P;var r=function(r){return t.hot.active?(T[r]?-1===T[r].parents.indexOf(e)&&T[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),P(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var a in P)Object.prototype.hasOwnProperty.call(P,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===p&&f("prepare"),v++,P.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(g[e]||E(e),0===v&&0===y&&k())}},r}var s=[],p="idle";function f(e){p=e;for(var t=0;t<s.length;t++)s[t].call(null,e)}var d,h,m,y=0,v=0,g={},b={},w={};function C(e){return+e+""===e?+e:e}function x(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=P.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;b={},g={},w=e.c,m=e.h,f("prepare");var t=new Promise(function(e,t){d={resolve:e,reject:t}});h={};return E(0),"prepare"===p&&0===v&&0===y&&k(),t});var t}function E(e){w[e]?(b[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=P.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function k(){f("ready");var e=d;if(d=null,e)if(r)Promise.resolve().then(function(){return O(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(C(n));e.resolve(t)}}function O(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,a,l,c;function s(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((l=T[a])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var u=0;u<l.parents.length;u++){var c=l.parents[u],s=T[c];if(s){if(s.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([c]),moduleId:a,parentId:c};-1===t.indexOf(c)&&(s.hot._acceptedDependencies[a]?(n[c]||(n[c]=[]),d(n[c],[a])):(delete n[c],t.push(c),r.push({chain:i.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var y={},v=[],g={},b=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var x in h)if(Object.prototype.hasOwnProperty.call(h,x)){var E;c=C(x);var k=!1,O=!1,S=!1,_="";switch((E=h[x]?s(c):{type:"disposed",moduleId:x}).chain&&(_="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+E.moduleId+_));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+_));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(k=new Error("Aborted because "+c+" is not accepted"+_));break;case"accepted":t.onAccepted&&t.onAccepted(E),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),S=!0;break;default:throw new Error("Unexception type "+E.type)}if(k)return f("abort"),Promise.reject(k);if(O)for(c in g[c]=h[c],d(v,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,c)&&(y[c]||(y[c]=[]),d(y[c],E.outdatedDependencies[c]));S&&(d(v,[E.moduleId]),g[c]=b)}var R,N=[];for(r=0;r<v.length;r++)c=v[r],T[c]&&T[c].hot._selfAccepted&&N.push({module:c,errorHandler:T[c].hot._selfAccepted});f("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var j,I,M=v.slice();M.length>0;)if(c=M.pop(),l=T[c]){var A={},L=l.hot._disposeHandlers;for(a=0;a<L.length;a++)(n=L[a])(A);for(i[c]=A,l.hot.active=!1,delete T[c],delete y[c],a=0;a<l.children.length;a++){var D=T[l.children[a]];D&&((R=D.parents.indexOf(c))>=0&&D.parents.splice(R,1))}}for(c in y)if(Object.prototype.hasOwnProperty.call(y,c)&&(l=T[c]))for(I=y[c],a=0;a<I.length;a++)j=I[a],(R=l.children.indexOf(j))>=0&&l.children.splice(R,1);for(c in f("apply"),o=m,g)Object.prototype.hasOwnProperty.call(g,c)&&(e[c]=g[c]);var U=null;for(c in y)if(Object.prototype.hasOwnProperty.call(y,c)&&(l=T[c])){I=y[c];var H=[];for(r=0;r<I.length;r++)if(j=I[r],n=l.hot._acceptedDependencies[j]){if(-1!==H.indexOf(n))continue;H.push(n)}for(r=0;r<H.length;r++){n=H[r];try{n(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:c,dependencyId:I[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<N.length;r++){var F=N[r];c=F.module,u=[c];try{P(c)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:c,error:e}),t.ignoreErrored||U||(U=e)}}return U?(f("fail"),Promise.reject(U)):(f("idle"),new Promise(function(e){e(v)}))}var T={};function P(t){if(T[t])return T[t].exports;var r=T[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:O,status:function(e){if(!e)return p;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(l=u,u=[],l),children:[]};return e[t].call(r.exports,r,r.exports,c(t)),r.l=!0,r.exports}P.m=e,P.c=T,P.d=function(e,t,n){P.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},P.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="./",P.h=function(){return o},c(36)(P.s=36)}([function(e,t,n){e.exports=n(24)()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,a,i,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(1),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,a.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):((0,a.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(9)),a=u(n(8)),i=n(4);function u(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,a){var u=void 0;"string"==typeof e?(u=(0,i.parsePath)(e)).state=t:(void 0===(u=r({},e)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==t&&void 0===u.state&&(u.state=t));try{u.pathname=decodeURI(u.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(u.key=n),a?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,a.pathname)):u.pathname=a.pathname:u.pathname||(u.pathname="/"),u},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,a.default)(e.state,t.state)}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&r(e),u=t&&r(t),l=i||u;if(e&&r(e)?a=n:n.length&&(a.pop(),a=a.concat(n)),!a.length)return"/";var c=void 0;if(a.length){var s=a[a.length-1];c="."===s||".."===s||""===s}else c=!1;for(var p=0,f=a.length;f>=0;f--){var d=a[f];"."===d?o(a,f):".."===d?(o(a,f),p++):p&&(o(a,f),p--)}if(!l)for(;p--;p)a.unshift("..");!l||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return c&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){i=r(n);for(var s=0;s<i.length;s++)a.call(n,i[s])&&(u[i[s]]=n[i[s]])}}return u}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,u=i&&i(Object);return function l(c,s,p){if("string"!=typeof s){if(u){var f=i(s);f&&f!==u&&l(c,f,p)}var d=r(s);o&&(d=d.concat(o(s)));for(var h=0;h<d.length;++h){var m=d[h];if(!(e[m]||t[m]||p&&p[m])){var y=a(s,m);try{n(c,m,y)}catch(e){}}}return c}return c}}()},function(e,t,n){var r=n(21);e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=f;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var p=n[0],f=n[1],d=n.index;if(u+=e.slice(i,d),i=d+p.length,f)u+=f[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var C=null!=m&&null!=h&&h!==m,x="+"===b||"*"===b,E="?"===b||"*"===b,k=n[2]||s,O=v||g;r.push({name:y||a++,prefix:m||"",delimiter:k,optional:E,repeat:x,partial:C,asterisk:!!w,pattern:O?c(O):w?".*":"[^"+l(k)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",u=n||{},l=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var p,f=u[s.name];if(null==f){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(f)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<f.length;d++){if(p=l(f[d]),!t[c].test(p))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(p)+"`");a+=(0===d?s.prefix:s.delimiter)+p}}else{if(p=s.asterisk?encodeURI(f).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(f),!t[c].test(p))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+p+'"');a+=s.prefix+p}}else a+=s}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)i+=l(c);else{var f=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+f+d+")*"),i+=d=c.optional?c.partial?f+"("+d+")?":"(?:"+f+"("+d+"))?":f+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,p(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return f(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=c(n(1)),i=n(4),u=n(7),l=c(n(6));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,p=e.initialIndex,f=void 0===p?0:p,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),y=function(e){o(x,e),x.length=x.entries.length,m.notifyListeners(x.location,x.action)},v=function(){return Math.random().toString(36).substr(2,h)},g=s(f,0,c.length-1),b=c.map(function(e){return"string"==typeof e?(0,u.createLocation)(e,void 0,v()):(0,u.createLocation)(e,void 0,e.key||v())}),w=i.createPath,C=function(e){var n=s(x.index+e,0,x.entries.length-1),r=x.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},x={length:b.length,action:"POP",location:b[g],index:g,entries:b,createHref:w,push:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,v(),x.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=x.index+1,n=x.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,v(),x.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(x.entries[x.index]=o,y({action:"REPLACE",location:o}))})},go:C,goBack:function(){return C(-1)},goForward:function(){return C(1)},canGo:function(e){var t=x.index+e;return t>=0&&t<x.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return x}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(1)),a=s(n(3)),i=n(7),u=n(4),l=s(n(6)),c=n(10);function s(e){return e&&e.__esModule?e:{default:e}}var p={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,u.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},f=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),s=e.getUserConfirmation,h=void 0===s?c.getConfirmation:s,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",g=p[y],b=g.encodePath,w=g.decodePath,C=function(){var e=w(f());return(0,o.default)(!v||(0,u.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,u.stripBasename)(e,v)),(0,i.createLocation)(e)},x=(0,l.default)(),E=function(e){r(D,e),D.length=t.length,x.notifyListeners(D.location,D.action)},k=!1,O=null,T=function(){var e=f(),t=b(e);if(e!==t)d(t);else{var n=C(),r=D.location;if(!k&&(0,i.locationsAreEqual)(r,n))return;if(O===(0,u.createPath)(n))return;O=null,P(n)}},P=function(e){k?(k=!1,E()):x.confirmTransitionTo(e,"POP",h,function(t){t?E({action:"POP",location:e}):S(e)})},S=function(e){var t=D.location,n=j.lastIndexOf((0,u.createPath)(t));-1===n&&(n=0);var r=j.lastIndexOf((0,u.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(k=!0,I(o))},_=f(),R=b(_);_!==R&&d(R);var N=C(),j=[(0,u.createPath)(N)],I=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},M=0,A=function(e){1===(M+=e)?(0,c.addEventListener)(window,"hashchange",T):0===M&&(0,c.removeEventListener)(window,"hashchange",T)},L=!1,D={length:t.length,action:"POP",location:N,createHref:function(e){return"#"+b(v+(0,u.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(v+t);if(f()!==r){O=t,function(e){window.location.hash=e}(r);var a=j.lastIndexOf((0,u.createPath)(D.location)),i=j.slice(0,-1===a?0:a+1);i.push(t),j=i,E({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),E()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,D.location);x.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(v+t);f()!==r&&(O=t,d(r));var o=j.indexOf((0,u.createPath)(D.location));-1!==o&&(j[o]=t),E({action:"REPLACE",location:n})}})},go:I,goBack:function(){return I(-1)},goForward:function(){return I(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=x.setPrompt(e);return L||(A(1),L=!0),function(){return L&&(L=!1,A(-1)),t()}},listen:function(e){var t=x.appendListener(e);return A(1),function(){A(-1),t()}}};return D}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=p(n(1)),i=p(n(3)),u=n(7),l=n(4),c=p(n(6)),s=n(10);function p(e){return e&&e.__esModule?e:{default:e}}var f=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,s.supportsHistory)(),p=!(0,s.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,y=void 0===m?s.getConfirmation:m,v=e.keyLength,g=void 0===v?6:v,b=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return(0,a.default)(!b||(0,l.hasBasename)(i,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+b+'".'),b&&(i=(0,l.stripBasename)(i,b)),(0,u.createLocation)(i,r,n)},C=function(){return Math.random().toString(36).substr(2,g)},x=(0,c.default)(),E=function(e){o(L,e),L.length=t.length,x.notifyListeners(L.location,L.action)},k=function(e){(0,s.isExtraneousPopstateEvent)(e)||P(w(e.state))},O=function(){P(w(f()))},T=!1,P=function(e){T?(T=!1,E()):x.confirmTransitionTo(e,"POP",y,function(t){t?E({action:"POP",location:e}):S(e)})},S=function(e){var t=L.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(T=!0,j(o))},_=w(f()),R=[_.key],N=function(e){return b+(0,l.createPath)(e)},j=function(e){t.go(e)},I=0,M=function(e){1===(I+=e)?((0,s.addEventListener)(window,"popstate",k),p&&(0,s.addEventListener)(window,"hashchange",O)):0===I&&((0,s.removeEventListener)(window,"popstate",k),p&&(0,s.removeEventListener)(window,"hashchange",O))},A=!1,L={length:t.length,action:"POP",location:_,createHref:N,push:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,u.createLocation)(e,o,C(),L.location);x.confirmTransitionTo(i,"PUSH",y,function(e){if(e){var r=N(i),o=i.key,u=i.state;if(n)if(t.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var l=R.indexOf(L.location.key),c=R.slice(0,-1===l?0:l+1);c.push(i.key),R=c,E({action:"PUSH",location:i})}else(0,a.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,u.createLocation)(e,o,C(),L.location);x.confirmTransitionTo(i,"REPLACE",y,function(e){if(e){var r=N(i),o=i.key,u=i.state;if(n)if(t.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var l=R.indexOf(L.location.key);-1!==l&&(R[l]=i.key),E({action:"REPLACE",location:i})}else(0,a.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:j,goBack:function(){return j(-1)},goForward:function(){return j(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=x.setPrompt(e);return A||(M(1),A=!0),function(){return A&&(A=!1,M(-1)),t()}},listen:function(e){var t=x.appendListener(e);return M(1),function(){M(-1),t()}}};return L}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),a=n(2),i=n.n(a),u=n(0),l=n.n(u),c=n(17),s=n.n(c),p=n(3),f=n.n(p),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=h(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;f()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var y=m,v=y;function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var b=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=g(this,e.call.apply(e,[this].concat(a))),r.history=s()(r.props),g(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(v,{history:this.history,children:this.props.children})},t}(i.a.Component);b.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var w=b,C=n(16),x=n.n(C);function E(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var k=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=E(this,e.call.apply(e,[this].concat(a))),r.history=x()(r.props),E(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(v,{history:this.history,children:this.props.children})},t}(i.a.Component);k.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var O=k,T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function P(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var S=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},_=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=P(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!S(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},P(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);f()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return i.a.createElement("a",T({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(i.a.Component);_.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},_.defaultProps={replace:!1},_.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var R=_,N=n(15),j=n.n(N);function I(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=I(this,e.call.apply(e,[this].concat(a))),r.history=j()(r.props),I(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(y,{history:this.history,children:this.props.children})},t}(i.a.Component);M.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var A=M,L=n(14),D=n.n(L),U={},H=0,F=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,a=n.exact,i=void 0!==a&&a,u=n.strict,l=void 0!==u&&u,c=n.sensitive,s=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=U[n]||(U[n]={});if(r[e])return r[e];var o=[],a={re:D()(e,o,t),keys:o};return H<1e4&&(r[e]=a,H++),a}(o,{end:i,strict:l,sensitive:void 0!==c&&c}),p=s.re,f=s.keys,d=p.exec(e);if(!d)return null;var h=d[0],m=d.slice(1),y=e===h;return i&&!y?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:y,params:f.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},z=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var B=function(e){return 0===i.a.Children.count(e)},W=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=V(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},V(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:z({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,u=e.sensitive;if(n)return n;f()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,c=(r||l.location).pathname;return o?F(c,{path:o,strict:a,exact:i,sensitive:u}):l.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!B(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!B(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,u=a.history,l=a.route,c=a.staticContext,s={match:e,location:this.props.location||l.location,history:u,staticContext:c};return r?e?i.a.createElement(r,s):null:o?e?o(s):null:n?"function"==typeof n?n(s):B(n)?null:i.a.Children.only(n):null},t}(i.a.Component);W.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},W.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},W.childContextTypes={router:l.a.object.isRequired};var q=W,K=q,$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Q=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,u=e.className,l=e.activeStyle,c=e.style,s=e.isActive,p=e.ariaCurrent,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return i.a.createElement(K,{path:"object"===(void 0===t?"undefined":Y(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(s?s(r,n):r);return i.a.createElement(R,$({to:t,className:o?[u,a].filter(function(e){return e}).join(" "):u,style:o?$({},c,l):c,"aria-current":o&&p},f))}})};Q.propTypes={to:R.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},Q.defaultProps={activeClassName:"active",ariaCurrent:"true"};var G=Q;var X=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);X.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},X.defaultProps={when:!0},X.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var J=X,Z=n(9),ee=n(8),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(i.a.Component);oe.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ae=oe,ie=n(4),ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ce=function(e,t){return e?ue({},t,{pathname:Object(ie.addLeadingSlash)(e)+t.pathname}):t},se=function(e){return"string"==typeof e?Object(ie.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,a=void 0===o?"":o,i=t.hash,u=void 0===i?"":i,{pathname:r,search:"?"===a?"":a,hash:"#"===u?"":u});var t,n,r,o,a,i,u},pe=function(e){return"string"==typeof e?e:Object(ie.createPath)(e)},fe=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},de=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Object(ie.addLeadingSlash)(r.props.basename+pe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=ce(n,se(e)),o.url=pe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=ce(n,se(e)),o.url=pe(o.location)},r.handleListen=function(){return de},r.handleBlock=function(){return de},le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ie.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:ue({},t,{pathname:t.pathname.substr(n.length)})}(t,se(n)),push:this.handlePush,replace:this.handleReplace,go:fe("go"),goBack:fe("goBack"),goForward:fe("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(y,ue({},r,{history:o}))},t}(i.a.Component);he.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:l.a.object.isRequired};var me=he;var ye=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(i.a.isValidElement(t)){var a=t.props,u=a.path,l=a.exact,c=a.strict,s=a.sensitive,p=a.from,f=u||p;null==r&&(o=t,r=f?F(n.pathname,{path:f,exact:l,strict:c,sensitive:s}):e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);ye.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ye.propTypes={children:l.a.node,location:l.a.object};var ve=ye,ge=F,be=n(13),we=n.n(be),Ce=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var xe=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(q,{render:function(t){return i.a.createElement(e,Ce({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},we()(t,e)};n.d(t,"BrowserRouter",function(){return w}),n.d(t,"HashRouter",function(){return O}),n.d(t,"Link",function(){return R}),n.d(t,"MemoryRouter",function(){return A}),n.d(t,"NavLink",function(){return G}),n.d(t,"Prompt",function(){return J}),n.d(t,"Redirect",function(){return ae}),n.d(t,"Route",function(){return K}),n.d(t,"Router",function(){return v}),n.d(t,"StaticRouter",function(){return me}),n.d(t,"Switch",function(){return ve}),n.d(t,"matchPath",function(){return ge}),n.d(t,"withRouter",function(){return xe})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={msg:"News"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.state.msg;return i.default.createElement("div",null,i.default.createElement("h2",null,e))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(2),i=(r=a)&&r.__esModule?r:{default:r};var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={msg:"Home"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentDidMount",value:function(){}},{key:"componentWillUnmount",value:function(){}},{key:"componentWillUpdate",value:function(e,t){}},{key:"render",value:function(){var e=this.state.msg;return i.default.createElement("div",null,i.default.createElement("h2",null,e))}}]),t}();t.default=u},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,u,l){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,a,i,u,l],p=0;(c=new Error(t.replace(/%s/g,function(){return s[p++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(5),o=n(23),a=n(22);e.exports=function(){function e(e,t,n,r,i,u){u!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){try{e.focus()}catch(e){}}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(27);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=n(5),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=o},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),o=n(32),a=n(12),i=n(5),u=n(31),l=n(30),c=n(29),s=n(28),p=n(25),f=n(11);function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||d("227");var h={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function m(e,t){return(e&t)===t}var y={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=y,n=e.Properties||{},r=e.DOMAttributeNamespaces||{},o=e.DOMAttributeNames||{};for(var a in e=e.DOMMutationMethods||{},n){v.hasOwnProperty(a)&&d("48",a);var i=a.toLowerCase(),u=n[a];1>=(i={attributeName:i,attributeNamespace:null,propertyName:a,mutationMethod:null,mustUseProperty:m(u,t.MUST_USE_PROPERTY),hasBooleanValue:m(u,t.HAS_BOOLEAN_VALUE),hasNumericValue:m(u,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:m(u,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:m(u,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:m(u,t.HAS_STRING_BOOLEAN_VALUE)}).hasBooleanValue+i.hasNumericValue+i.hasOverloadedBooleanValue||d("50",a),o.hasOwnProperty(a)&&(i.attributeName=o[a]),r.hasOwnProperty(a)&&(i.attributeNamespace=r[a]),e.hasOwnProperty(a)&&(i.mutationMethod=e[a]),v[a]=i}}},v={};function g(e,t){if(h.hasOwnProperty(e)||2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return h.hasOwnProperty(e)?e=!0:(t=b(e))?e=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:e="data-"===(e=e.toLowerCase().slice(0,5))||"aria-"===e,e;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function b(e){return v.hasOwnProperty(e)?v[e]:null}var w=y,C=w.MUST_USE_PROPERTY,x=w.HAS_BOOLEAN_VALUE,E=w.HAS_NUMERIC_VALUE,k=w.HAS_POSITIVE_NUMERIC_VALUE,O=w.HAS_OVERLOADED_BOOLEAN_VALUE,T=w.HAS_STRING_BOOLEAN_VALUE,P={Properties:{allowFullScreen:x,async:x,autoFocus:x,autoPlay:x,capture:O,checked:C|x,cols:k,contentEditable:T,controls:x,default:x,defer:x,disabled:x,download:O,draggable:T,formNoValidate:x,hidden:x,loop:x,multiple:C|x,muted:C|x,noValidate:x,open:x,playsInline:x,readOnly:x,required:x,reversed:x,rows:k,rowSpan:E,scoped:x,seamless:x,selected:C|x,size:k,start:E,span:k,spellCheck:T,style:0,tabIndex:0,itemScope:x,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:T},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},S=w.HAS_STRING_BOOLEAN_VALUE,_="http://www.w3.org/1999/xlink",R="http://www.w3.org/XML/1998/namespace",N={Properties:{autoReverse:S,externalResourcesRequired:S,preserveAlpha:S},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:_,xlinkArcrole:_,xlinkHref:_,xlinkRole:_,xlinkShow:_,xlinkTitle:_,xlinkType:_,xmlBase:R,xmlLang:R,xmlSpace:R}},j=/[\-\:]([a-z])/g;function I(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){var t=e.replace(j,I);N.Properties[t]=0,N.DOMAttributeNames[t]=e}),w.injectDOMPropertyConfig(P),w.injectDOMPropertyConfig(N);var M={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&d("197"),A=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,o,a,i,u,l){A.apply(M,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,u,l){if(M.invokeGuardedCallback.apply(this,arguments),M.hasCaughtError()){var c=M.clearCaughtError();M._hasRethrowError||(M._hasRethrowError=!0,M._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(M._hasRethrowError){var e=M._rethrowError;throw M._rethrowError=null,M._hasRethrowError=!1,e}}.apply(M,arguments)},hasCaughtError:function(){return M._hasCaughtError},clearCaughtError:function(){if(M._hasCaughtError){var e=M._caughtError;return M._caughtError=null,M._hasCaughtError=!1,e}d("198")}};function A(e,t,n,r,o,a,i,u,l){M._hasCaughtError=!1,M._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){M._caughtError=e,M._hasCaughtError=!0}}var L=null,D={};function U(){if(L)for(var e in D){var t=D[e],n=L.indexOf(e);if(-1<n||d("96",e),!F[n])for(var r in t.extractEvents||d("97",e),F[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,u=r;z.hasOwnProperty(u)&&d("99",u),z[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&H(l[o],i,u);o=!0}else a.registrationName?(H(a.registrationName,i,u),o=!0):o=!1;o||d("98",r,e)}}}function H(e,t,n){V[e]&&d("100",e),V[e]=t,B[e]=t.eventTypes[n].dependencies}var F=[],z={},V={},B={};function W(e){L&&d("101"),L=Array.prototype.slice.call(e),U()}function q(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];D.hasOwnProperty(t)&&D[t]===r||(D[t]&&d("102",t),D[t]=r,n=!0)}n&&U()}var K=Object.freeze({plugins:F,eventNameDispatchConfigs:z,registrationNameModules:V,registrationNameDependencies:B,possibleRegistrationNames:null,injectEventPluginOrder:W,injectEventPluginsByName:q}),$=null,Y=null,Q=null;function G(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=Q(r),M.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function X(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function J(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var Z=null;function ee(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)G(e,t,n[o],r[o]);else n&&G(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function te(e){return ee(e,!0)}function ne(e){return ee(e,!1)}var re={injectEventPluginOrder:W,injectEventPluginsByName:q};function oe(e,t){var n=e.stateNode;if(!n)return null;var r=$(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function ae(e,t,n,r){for(var o,a=0;a<F.length;a++){var i=F[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=X(o,i))}return o}function ie(e){e&&(Z=X(Z,e))}function ue(e){var t=Z;Z=null,t&&(J(t,e?te:ne),Z&&d("95"),M.rethrowCaughtError())}var le=Object.freeze({injection:re,getListener:oe,extractEvents:ae,enqueueEvents:ie,processEventQueue:ue}),ce=Math.random().toString(36).slice(2),se="__reactInternalInstance$"+ce,pe="__reactEventHandlers$"+ce;function fe(e){if(e[se])return e[se];for(var t=[];!e[se];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=void 0,r=e[se];if(5===r.tag||6===r.tag)return r;for(;e&&(r=e[se]);e=t.pop())n=r;return n}function de(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function he(e){return e[pe]||null}var me=Object.freeze({precacheFiberNode:function(e,t){t[se]=e},getClosestInstanceFromNode:fe,getInstanceFromNode:function(e){return!(e=e[se])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:de,getFiberCurrentPropsFromNode:he,updateFiberProps:function(e,t){e[pe]=t}});function ye(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function ve(e,t,n){for(var r=[];e;)r.push(e),e=ye(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function ge(e,t,n){(t=oe(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=X(n._dispatchListeners,t),n._dispatchInstances=X(n._dispatchInstances,e))}function be(e){e&&e.dispatchConfig.phasedRegistrationNames&&ve(e._targetInst,ge,e)}function we(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;ve(t=t?ye(t):null,ge,e)}}function Ce(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=oe(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=X(n._dispatchListeners,t),n._dispatchInstances=X(n._dispatchInstances,e))}function xe(e){e&&e.dispatchConfig.registrationName&&Ce(e._targetInst,null,e)}function Ee(e){J(e,be)}function ke(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,u=o;u;u=ye(u))i++;u=0;for(var l=a;l;l=ye(l))u++;for(;0<i-u;)o=ye(o),i--;for(;0<u-i;)a=ye(a),u--;for(;i--;){if(o===a||o===a.alternate)break e;o=ye(o),a=ye(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=ye(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=ye(r);for(r=0;r<o.length;r++)Ce(o[r],"bubbled",e);for(e=n.length;0<e--;)Ce(n[e],"captured",t)}var Oe=Object.freeze({accumulateTwoPhaseDispatches:Ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){J(e,we)},accumulateEnterLeaveDispatches:ke,accumulateDirectDispatches:function(e){J(e,xe)}}),Te=null;function Pe(){return!Te&&o.canUseDOM&&(Te="textContent"in document.documentElement?"textContent":"innerText"),Te}var Se={_root:null,_startText:null,_fallbackText:null};function _e(){if(Se._fallbackText)return Se._fallbackText;var e,t,n=Se._startText,r=n.length,o=Re(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Se._fallbackText=o.slice(e,1<t?1-t:void 0),Se._fallbackText}function Re(){return"value"in Se._root?Se._root.value:Se._root[Pe()]}var Ne="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),je={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ie(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}function Me(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ae(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Le(e){e.eventPool=[],e.getPooled=Me,e.release=Ae}function De(e,t,n,r){return Ie.call(this,e,t,n,r)}function Ue(e,t,n,r){return Ie.call(this,e,t,n,r)}a(Ie.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<Ne.length;t++)this[Ne[t]]=null}}),Ie.Interface=je,Ie.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;a(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=a({},this.Interface,t),e.augmentClass=this.augmentClass,Le(e)},Le(Ie),Ie.augmentClass(De,{data:null}),Ie.augmentClass(Ue,{data:null});var He,Fe=[9,13,27,32],ze=o.canUseDOM&&"CompositionEvent"in window,Ve=null;if(o.canUseDOM&&"documentMode"in document&&(Ve=document.documentMode),He=o.canUseDOM&&"TextEvent"in window&&!Ve){var Be=window.opera;He=!("object"==typeof Be&&"function"==typeof Be.version&&12>=parseInt(Be.version(),10))}var We=He,qe=o.canUseDOM&&(!ze||Ve&&8<Ve&&11>=Ve),Ke=String.fromCharCode(32),$e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Ye=!1;function Qe(e,t){switch(e){case"topKeyUp":return-1!==Fe.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ge(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Xe=!1;var Je={eventTypes:$e,extractEvents:function(e,t,n,r){var o;if(ze)e:{switch(e){case"topCompositionStart":var a=$e.compositionStart;break e;case"topCompositionEnd":a=$e.compositionEnd;break e;case"topCompositionUpdate":a=$e.compositionUpdate;break e}a=void 0}else Xe?Qe(e,n)&&(a=$e.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(a=$e.compositionStart);return a?(qe&&(Xe||a!==$e.compositionStart?a===$e.compositionEnd&&Xe&&(o=_e()):(Se._root=r,Se._startText=Re(),Xe=!0)),a=De.getPooled(a,t,n,r),o?a.data=o:null!==(o=Ge(n))&&(a.data=o),Ee(a),o=a):o=null,(e=We?function(e,t){switch(e){case"topCompositionEnd":return Ge(t);case"topKeyPress":return 32!==t.which?null:(Ye=!0,Ke);case"topTextInput":return(e=t.data)===Ke&&Ye?null:e;default:return null}}(e,n):function(e,t){if(Xe)return"topCompositionEnd"===e||!ze&&Qe(e,t)?(e=_e(),Se._root=null,Se._startText=null,Se._fallbackText=null,Xe=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return qe?null:t.data;default:return null}}(e,n))?((t=Ue.getPooled($e.beforeInput,t,n,r)).data=e,Ee(t)):t=null,[o,t]}},Ze=null,et=null,tt=null;function nt(e){if(e=Y(e)){Ze&&"function"==typeof Ze.restoreControlledState||d("194");var t=$(e.stateNode);Ze.restoreControlledState(e.stateNode,e.type,t)}}var rt={injectFiberControlledHostComponent:function(e){Ze=e}};function ot(e){et?tt?tt.push(e):tt=[e]:et=e}function at(){if(et){var e=et,t=tt;if(tt=et=null,nt(e),t)for(e=0;e<t.length;e++)nt(t[e])}}var it=Object.freeze({injection:rt,enqueueStateRestore:ot,restoreStateIfNeeded:at});function ut(e,t){return e(t)}var lt=!1;function ct(e,t){if(lt)return ut(e,t);lt=!0;try{return ut(e,t)}finally{lt=!1,at()}}var st,pt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ft(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!pt[e.type]:"textarea"===t}function dt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ht(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n=(t="on"+e)in document;return n||((n=document.createElement("div")).setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&st&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function mt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function yt(e){e._valueTracker||(e._valueTracker=function(e){var t=mt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function vt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=mt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}o.canUseDOM&&(st=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var gt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function bt(e,t,n){return(e=Ie.getPooled(gt.change,e,t,n)).type="change",ot(n),Ee(e),e}var wt=null,Ct=null;function xt(e){ie(e),ue(!1)}function Et(e){if(vt(de(e)))return e}function kt(e,t){if("topChange"===e)return t}var Ot=!1;function Tt(){wt&&(wt.detachEvent("onpropertychange",Pt),Ct=wt=null)}function Pt(e){"value"===e.propertyName&&Et(Ct)&&ct(xt,e=bt(Ct,e,dt(e)))}function St(e,t,n){"topFocus"===e?(Tt(),Ct=n,(wt=t).attachEvent("onpropertychange",Pt)):"topBlur"===e&&Tt()}function _t(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Et(Ct)}function Rt(e,t){if("topClick"===e)return Et(t)}function Nt(e,t){if("topInput"===e||"topChange"===e)return Et(t)}o.canUseDOM&&(Ot=ht("input")&&(!document.documentMode||9<document.documentMode));var jt={eventTypes:gt,_isInputEventSupported:Ot,extractEvents:function(e,t,n,r){var o=t?de(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=kt;else if(ft(o))if(Ot)i=Nt;else{i=_t;var u=St}else!(a=o.nodeName)||"input"!==a.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(i=Rt);if(i&&(i=i(e,t)))return bt(i,n,r);u&&u(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))}};function It(e,t,n,r){return Ie.call(this,e,t,n,r)}Ie.augmentClass(It,{view:null,detail:null});var Mt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function At(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Mt[e])&&!!t[e]}function Lt(){return At}function Dt(e,t,n,r){return Ie.call(this,e,t,n,r)}It.augmentClass(Dt,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Lt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var Ut={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ht={eventTypes:Ut,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?fe(t):null):e=null,e===t)return null;var a=null==e?o:de(e);o=null==t?o:de(t);var i=Dt.getPooled(Ut.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Dt.getPooled(Ut.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,ke(i,n,e,t),[i,n]}},Ft=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function zt(e){return"string"==typeof(e=e.type)?e:"function"==typeof e?e.displayName||e.name:null}function Vt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Bt(e){return!!(e=e._reactInternalFiber)&&2===Vt(e)}function Wt(e){2!==Vt(e)&&d("188")}function qt(e){var t=e.alternate;if(!t)return 3===(t=Vt(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return Wt(o),e;if(i===r)return Wt(o),t;i=i.sibling}d("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}i||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}var Kt=[];function $t(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=fe(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],Qt(e.topLevelType,t,e.nativeEvent,dt(e.nativeEvent))}var Yt=!0,Qt=void 0;function Gt(e){Yt=!!e}function Xt(e,t,n){return n?u.listen(n,t,Zt.bind(null,e)):null}function Jt(e,t,n){return n?u.capture(n,t,Zt.bind(null,e)):null}function Zt(e,t){if(Yt){var n=dt(t);if(null===(n=fe(n))||"number"!=typeof n.tag||2===Vt(n)||(n=null),Kt.length){var r=Kt.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ct($t,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Kt.length&&Kt.push(e)}}}var en=Object.freeze({get _enabled(){return Yt},get _handleTopLevel(){return Qt},setHandleTopLevel:function(e){Qt=e},setEnabled:Gt,isEnabled:function(){return Yt},trapBubbledEvent:Xt,trapCapturedEvent:Jt,dispatchEvent:Zt});function tn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var nn={animationend:tn("Animation","AnimationEnd"),animationiteration:tn("Animation","AnimationIteration"),animationstart:tn("Animation","AnimationStart"),transitionend:tn("Transition","TransitionEnd")},rn={},on={};function an(e){if(rn[e])return rn[e];if(!nn[e])return e;var t,n=nn[e];for(t in n)if(n.hasOwnProperty(t)&&t in on)return rn[e]=n[t];return""}o.canUseDOM&&(on=document.createElement("div").style,"AnimationEvent"in window||(delete nn.animationend.animation,delete nn.animationiteration.animation,delete nn.animationstart.animation),"TransitionEvent"in window||delete nn.transitionend.transition);var un={topAbort:"abort",topAnimationEnd:an("animationend")||"animationend",topAnimationIteration:an("animationiteration")||"animationiteration",topAnimationStart:an("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:an("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},ln={},cn=0,sn="_reactListenersID"+(""+Math.random()).slice(2);function pn(e){return Object.prototype.hasOwnProperty.call(e,sn)||(e[sn]=cn++,ln[e[sn]]={}),ln[e[sn]]}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var mn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,yn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},vn=null,gn=null,bn=null,wn=!1;function Cn(e,t){if(wn||null==vn||vn!==l())return null;var n=vn;return"selectionStart"in n&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,bn&&c(bn,n)?null:(bn=n,(e=Ie.getPooled(yn.select,gn,e,t)).type="select",e.target=vn,Ee(e),e)}var xn={eventTypes:yn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=pn(a),o=B.onSelect;for(var i=0;i<o.length;i++){var u=o[i];if(!a.hasOwnProperty(u)||!a[u]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?de(t):window,e){case"topFocus":(ft(a)||"true"===a.contentEditable)&&(vn=a,gn=t,bn=null);break;case"topBlur":bn=gn=vn=null;break;case"topMouseDown":wn=!0;break;case"topContextMenu":case"topMouseUp":return wn=!1,Cn(n,r);case"topSelectionChange":if(mn)break;case"topKeyDown":case"topKeyUp":return Cn(n,r)}return null}};function En(e,t,n,r){return Ie.call(this,e,t,n,r)}function kn(e,t,n,r){return Ie.call(this,e,t,n,r)}function On(e,t,n,r){return Ie.call(this,e,t,n,r)}function Tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}Ie.augmentClass(En,{animationName:null,elapsedTime:null,pseudoElement:null}),Ie.augmentClass(kn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),It.augmentClass(On,{relatedTarget:null});var Pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function _n(e,t,n,r){return Ie.call(this,e,t,n,r)}function Rn(e,t,n,r){return Ie.call(this,e,t,n,r)}function Nn(e,t,n,r){return Ie.call(this,e,t,n,r)}function jn(e,t,n,r){return Ie.call(this,e,t,n,r)}function In(e,t,n,r){return Ie.call(this,e,t,n,r)}It.augmentClass(_n,{key:function(e){if(e.key){var t=Pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Lt,charCode:function(e){return"keypress"===e.type?Tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Dt.augmentClass(Rn,{dataTransfer:null}),It.augmentClass(Nn,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Lt}),Ie.augmentClass(jn,{propertyName:null,elapsedTime:null,pseudoElement:null}),Dt.augmentClass(In,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var Mn={},An={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t="top"+t]},Mn[e]=n,An[t]=n});var Ln={eventTypes:Mn,extractEvents:function(e,t,n,r){var o=An[e];if(!o)return null;switch(e){case"topKeyPress":if(0===Tn(n))return null;case"topKeyDown":case"topKeyUp":e=_n;break;case"topBlur":case"topFocus":e=On;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Dt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=Rn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=Nn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=En;break;case"topTransitionEnd":e=jn;break;case"topScroll":e=It;break;case"topWheel":e=In;break;case"topCopy":case"topCut":case"topPaste":e=kn;break;default:e=Ie}return Ee(t=e.getPooled(o,t,n,r)),t}};Qt=function(e,t,n,r){ie(e=ae(e,t,n,r)),ue(!1)},re.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),$=me.getFiberCurrentPropsFromNode,Y=me.getInstanceFromNode,Q=me.getNodeFromInstance,re.injectEventPluginsByName({SimpleEventPlugin:Ln,EnterLeaveEventPlugin:Ht,ChangeEventPlugin:jt,SelectEventPlugin:xn,BeforeInputEventPlugin:Je});var Dn=[],Un=-1;function Hn(e){0>Un||(e.current=Dn[Un],Dn[Un]=null,Un--)}function Fn(e,t){Dn[++Un]=e.current,e.current=t}new Set;var zn={current:f},Vn={current:!1},Bn=f;function Wn(e){return Kn(e)?Bn:zn.current}function qn(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Kn(e){return 2===e.tag&&null!=e.type.childContextTypes}function $n(e){Kn(e)&&(Hn(Vn),Hn(zn))}function Yn(e,t,n){null!=zn.cursor&&d("168"),Fn(zn,t),Fn(Vn,n)}function Qn(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",zt(e)||"Unknown",o);return a({},t,n)}function Gn(e){if(!Kn(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,Bn=zn.current,Fn(zn,t),Fn(Vn,Vn.current),!0}function Xn(e,t){var n=e.stateNode;if(n||d("169"),t){var r=Qn(e,Bn);n.__reactInternalMemoizedMergedChildContext=r,Hn(Vn),Hn(zn),Fn(zn,r)}else Hn(Vn);Fn(Vn,t)}function Jn(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Zn(e,t,n){var r=e.alternate;return null===r?((r=new Jn(e.tag,e.key,e.internalContextTag)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.pendingProps=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function er(e,t,n){var r=void 0,o=e.type,a=e.key;return"function"==typeof o?((r=o.prototype&&o.prototype.isReactComponent?new Jn(2,a,t):new Jn(0,a,t)).type=o,r.pendingProps=e.props):"string"==typeof o?((r=new Jn(5,a,t)).type=o,r.pendingProps=e.props):"object"==typeof o&&null!==o&&"number"==typeof o.tag?(r=o).pendingProps=e.props:d("130",null==o?o:typeof o,""),r.expirationTime=n,r}function tr(e,t,n,r){return(t=new Jn(10,r,t)).pendingProps=e,t.expirationTime=n,t}function nr(e,t,n){return(t=new Jn(6,null,t)).pendingProps=e,t.expirationTime=n,t}function rr(e,t,n){return(t=new Jn(7,e.key,t)).type=e.handler,t.pendingProps=e,t.expirationTime=n,t}function or(e,t,n){return(e=new Jn(9,null,t)).expirationTime=n,e}function ar(e,t,n){return(t=new Jn(4,e.key,t)).pendingProps=e.children||[],t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var ir=null,ur=null;function lr(e){return function(t){try{return e(t)}catch(e){}}}function cr(e){"function"==typeof ir&&ir(e)}function sr(e){"function"==typeof ur&&ur(e)}function pr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function fr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function dr(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue=pr(null)),null!==n?null===(e=n.updateQueue)&&(e=n.updateQueue=pr(null)):e=null,null===(e=e!==r?e:null)?fr(r,t):null===r.last||null===e.last?(fr(r,t),fr(e,t)):(fr(r,t),e.last=t)}function hr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function mr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,c=!1;null!==l;){var s=l.expirationTime;if(s>i){var p=n.expirationTime;(0===p||p>s)&&(n.expirationTime=s),c||(c=!0,n.baseState=e)}else c||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=hr(l,r,e,o),u=!0):(s=hr(l,r,e,o))&&(e=u?a({},e,s):a(e,s),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(s=n.callbackList)&&(s=n.callbackList=[]),s.push(l));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||(t.updateQueue=null),c||(n.baseState=e),e}function yr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var vr="function"==typeof Symbol&&Symbol.for,gr=vr?Symbol.for("react.element"):60103,br=vr?Symbol.for("react.call"):60104,wr=vr?Symbol.for("react.return"):60105,Cr=vr?Symbol.for("react.portal"):60106,xr=vr?Symbol.for("react.fragment"):60107,Er="function"==typeof Symbol&&Symbol.iterator;function kr(e){return null===e||void 0===e?null:"function"==typeof(e=Er&&e[Er]||e["@@iterator"])?e:null}var Or=Array.isArray;function Tr(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){var r=void 0;(t=t._owner)&&(2!==t.tag&&d("110"),r=t.stateNode),r||d("147",n);var o=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===o?e.ref:((e=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,e)}"string"!=typeof n&&d("148"),t._owner||d("149",n)}return n}function Pr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Sr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Zn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=nr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Tr(t,n),r.return=e,r):((r=er(n,e.internalContextTag,r)).ref=Tr(t,n),r.return=e,r)}function c(e,t,n,r){return null===t||7!==t.tag?((t=rr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null===t||9!==t.tag?((t=or(n,e.internalContextTag,r)).type=n.value,t.return=e,t):((t=o(t,null,r)).type=n.value,t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ar(n,e.internalContextTag,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,a){return null===t||10!==t.tag?((t=tr(n,e.internalContextTag,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nr(""+t,e.internalContextTag,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case gr:return t.type===xr?((t=tr(t.props.children,e.internalContextTag,n,t.key)).return=e,t):((n=er(t,e.internalContextTag,n)).ref=Tr(null,t),n.return=e,n);case br:return(t=rr(t,e.internalContextTag,n)).return=e,t;case wr:return(n=or(t,e.internalContextTag,n)).type=t.value,n.return=e,n;case Cr:return(t=ar(t,e.internalContextTag,n)).return=e,t}if(Or(t)||kr(t))return(t=tr(t,e.internalContextTag,n,null)).return=e,t;Pr(e,t)}return null}function m(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case gr:return n.key===o?n.type===xr?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case br:return n.key===o?c(e,t,n,r):null;case wr:return null===o?s(e,t,n,r):null;case Cr:return n.key===o?p(e,t,n,r):null}if(Or(n)||kr(n))return null!==o?null:f(e,t,n,r,null);Pr(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case gr:return e=e.get(null===r.key?n:r.key)||null,r.type===xr?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case br:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case wr:return s(t,e=e.get(n)||null,r,o);case Cr:return p(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Or(r)||kr(r))return f(t,e=e.get(n)||null,r,o,null);Pr(t,r)}return null}function v(o,i,u,l){for(var c=null,s=null,p=i,f=i=0,d=null;null!==p&&f<u.length;f++){p.index>f?(d=p,p=null):d=p.sibling;var v=m(o,p,u[f],l);if(null===v){null===p&&(p=d);break}e&&p&&null===v.alternate&&t(o,p),i=a(v,i,f),null===s?c=v:s.sibling=v,s=v,p=d}if(f===u.length)return n(o,p),c;if(null===p){for(;f<u.length;f++)(p=h(o,u[f],l))&&(i=a(p,i,f),null===s?c=p:s.sibling=p,s=p);return c}for(p=r(o,p);f<u.length;f++)(d=y(p,o,f,u[f],l))&&(e&&null!==d.alternate&&p.delete(null===d.key?f:d.key),i=a(d,i,f),null===s?c=d:s.sibling=d,s=d);return e&&p.forEach(function(e){return t(o,e)}),c}function g(o,i,u,l){var c=kr(u);"function"!=typeof c&&d("150"),null==(u=c.call(u))&&d("151");for(var s=c=null,p=i,f=i=0,v=null,g=u.next();null!==p&&!g.done;f++,g=u.next()){p.index>f?(v=p,p=null):v=p.sibling;var b=m(o,p,g.value,l);if(null===b){p||(p=v);break}e&&p&&null===b.alternate&&t(o,p),i=a(b,i,f),null===s?c=b:s.sibling=b,s=b,p=v}if(g.done)return n(o,p),c;if(null===p){for(;!g.done;f++,g=u.next())null!==(g=h(o,g.value,l))&&(i=a(g,i,f),null===s?c=g:s.sibling=g,s=g);return c}for(p=r(o,p);!g.done;f++,g=u.next())null!==(g=y(p,o,f,g.value,l))&&(e&&null!==g.alternate&&p.delete(null===g.key?f:g.key),i=a(g,i,f),null===s?c=g:s.sibling=g,s=g);return e&&p.forEach(function(e){return t(o,e)}),c}return function(e,r,a,u){"object"==typeof a&&null!==a&&a.type===xr&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case gr:e:{var c=a.key;for(l=r;null!==l;){if(l.key===c){if(10===l.tag?a.type===xr:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===xr?a.props.children:a.props,u)).ref=Tr(l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===xr?((r=tr(a.props.children,e.internalContextTag,u,a.key)).return=e,e=r):((u=er(a,e.internalContextTag,u)).ref=Tr(r,a),u.return=e,e=u)}return i(e);case br:e:{for(l=a.key;null!==r;){if(r.key===l){if(7===r.tag){n(e,r.sibling),(r=o(r,a,u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=rr(a,e.internalContextTag,u)).return=e,e=r}return i(e);case wr:e:{if(null!==r){if(9===r.tag){n(e,r.sibling),(r=o(r,null,u)).type=a.value,r.return=e,e=r;break e}n(e,r)}(r=or(a,e.internalContextTag,u)).type=a.value,r.return=e,e=r}return i(e);case Cr:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ar(a,e.internalContextTag,u)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,a,u)):(n(e,r),r=nr(a,e.internalContextTag,u)),r.return=e,i(e=r);if(Or(a))return v(e,r,a,u);if(kr(a))return g(e,r,a,u);if(l&&Pr(e,a),void 0===a)switch(e.tag){case 2:case 1:d("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var _r=Sr(!0),Rr=Sr(!1);function Nr(e,t,n,r,o){function a(e,t,n){var r=t.expirationTime;t.child=null===e?Rr(t,null,n,r):_r(t,e.child,n,r)}function i(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=128)}function u(e,t,n,r){if(i(e,t),!n)return r&&Xn(t,!1),s(e,t);n=t.stateNode,Ft.current=t;var o=n.render();return t.effectTag|=1,a(e,t,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&Xn(t,!0),t.child}function l(e){var t=e.stateNode;t.pendingContext?Yn(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Yn(0,t.context,!1),g(e,t.containerInfo)}function s(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=Zn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Zn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function p(e,t){switch(t.tag){case 3:l(t);break;case 2:Gn(t);break;case 4:g(t,t.stateNode.containerInfo)}return null}var h=e.shouldSetTextContent,m=e.useSyncScheduling,y=e.shouldDeprioritizeSubtree,v=t.pushHostContext,g=t.pushHostContainer,b=n.enterHydrationState,w=n.resetHydrationState,C=n.tryToClaimNextHydratableInstance,x=(e=function(e,t,n,r){function o(e,t){t.updater=a,e.stateNode=t,t._reactInternalFiber=e}var a={isMounted:Bt,enqueueSetState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);dr(n,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueReplaceState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var a=t(n);dr(n,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),e(n,a)},enqueueForceUpdate:function(n,r){n=n._reactInternalFiber,r=void 0===r?null:r;var o=t(n);dr(n,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),e(n,o)}};return{adoptClassInstance:o,constructClassInstance:function(e,t){var n=e.type,r=Wn(e),a=2===e.tag&&null!=e.type.contextTypes,i=a?qn(e,r):f;return o(e,t=new n(t,i)),a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=i),t},mountClassInstance:function(e,t){var n=e.alternate,r=e.stateNode,o=r.state||null,i=e.pendingProps;i||d("158");var u=Wn(e);r.props=i,r.state=e.memoizedState=o,r.refs=f,r.context=qn(e,u),null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=1),"function"==typeof r.componentWillMount&&(o=r.state,r.componentWillMount(),o!==r.state&&a.enqueueReplaceState(r,r.state,null),null!==(o=e.updateQueue)&&(r.state=mr(n,e,o,r,i,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=4)},updateClassInstance:function(e,t,o){var i=t.stateNode;i.props=t.memoizedProps,i.state=t.memoizedState;var u=t.memoizedProps,l=t.pendingProps;l||null==(l=u)&&d("159");var s=i.context,p=Wn(t);if(p=qn(t,p),"function"!=typeof i.componentWillReceiveProps||u===l&&s===p||(s=i.state,i.componentWillReceiveProps(l,p),i.state!==s&&a.enqueueReplaceState(i,i.state,null)),s=t.memoizedState,o=null!==t.updateQueue?mr(e,t,t.updateQueue,i,l,o):s,!(u!==l||s!==o||Vn.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),!1;var f=l;if(null===u||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)f=!0;else{var h=t.stateNode,m=t.type;f="function"==typeof h.shouldComponentUpdate?h.shouldComponentUpdate(f,o,p):!(m.prototype&&m.prototype.isPureReactComponent&&c(u,f)&&c(s,o))}return f?("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(l,o,p),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),n(t,l),r(t,o)),i.props=l,i.state=o,i.context=p,f}}}(r,o,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,E=e.constructClassInstance,k=e.mountClassInstance,O=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n)return p(0,t);switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,c=Wn(t);return r=r(o,c=qn(t,c)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render?(t.tag=2,o=Gn(t),x(t,r),k(t,n),t=u(e,t,!0,o)):(t.tag=1,a(e,t,r),t.memoizedProps=o,t=t.child),t;case 1:e:{if(o=t.type,n=t.pendingProps,r=t.memoizedProps,Vn.current)null===n&&(n=r);else if(null===n||r===n){t=s(e,t);break e}o=o(n,r=qn(t,r=Wn(t))),t.effectTag|=1,a(e,t,o),t.memoizedProps=n,t=t.child}return t;case 2:return o=Gn(t),r=void 0,null===e?t.stateNode?d("153"):(E(t,t.pendingProps),k(t,n),r=!0):r=O(e,t,n),u(e,t,r,o);case 3:return l(t),null!==(o=t.updateQueue)?(r=t.memoizedState)===(o=mr(e,t,o,null,null,n))?(w(),t=s(e,t)):(r=o.element,c=t.stateNode,(null===e||null===e.child)&&c.hydrate&&b(t)?(t.effectTag|=2,t.child=Rr(t,null,r,n)):(w(),a(e,t,r)),t.memoizedState=o,t=t.child):(w(),t=s(e,t)),t;case 5:v(t),null===e&&C(t),o=t.type;var f=t.memoizedProps;return null===(r=t.pendingProps)&&(null===(r=f)&&d("154")),c=null!==e?e.memoizedProps:null,Vn.current||null!==r&&f!==r?(f=r.children,h(o,r)?f=null:c&&h(o,c)&&(t.effectTag|=16),i(e,t),2147483647!==n&&!m&&y(o,r)?(t.expirationTime=2147483647,t=null):(a(e,t,f),t.memoizedProps=r,t=t.child)):t=s(e,t),t;case 6:return null===e&&C(t),null===(e=t.pendingProps)&&(e=t.memoizedProps),t.memoizedProps=e,null;case 8:t.tag=7;case 7:return o=t.pendingProps,Vn.current?null===o&&(null===(o=e&&e.memoizedProps)&&d("154")):null!==o&&t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?Rr(t,t.stateNode,r,n):_r(t,t.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:e:{if(g(t,t.stateNode.containerInfo),o=t.pendingProps,Vn.current)null===o&&(null==(o=e&&e.memoizedProps)&&d("154"));else if(null===o||t.memoizedProps===o){t=s(e,t);break e}null===e?t.child=_r(t,null,o,n):a(e,t,o),t.memoizedProps=o,t=t.child}return t;case 10:e:{if(n=t.pendingProps,Vn.current)null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=s(e,t);break e}a(e,t,n),t.memoizedProps=n,t=t.child}return t;default:d("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case 2:Gn(t);break;case 3:l(t);break;default:d("157")}return t.effectTag|=64,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),0===t.expirationTime||t.expirationTime>n?p(0,t):(t.firstEffect=null,t.lastEffect=null,t.child=null===e?Rr(t,null,null,n):_r(t,e.child,null,n),2===t.tag&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}var jr={};function Ir(e){function t(e){ie=G=!0;var t=e.stateNode;if(t.current===e&&d("177"),t.isReadyForCommit=!1,Ft.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var n=e.firstEffect}else n=e;else n=e.firstEffect;for(q(),ee=n;null!==ee;){var r=!1,o=void 0;try{for(;null!==ee;){var a=ee.effectTag;if(16&a&&M(ee),128&a){var i=ee.alternate;null!==i&&F(i)}switch(-242&a){case 2:A(ee),ee.effectTag&=-3;break;case 6:A(ee),ee.effectTag&=-3,D(ee.alternate,ee);break;case 4:D(ee.alternate,ee);break;case 8:ue=!0,L(ee),ue=!1}ee=ee.nextEffect}}catch(e){r=!0,o=e}r&&(null===ee&&d("178"),u(ee,o),null!==ee&&(ee=ee.nextEffect))}for(K(),t.current=e,ee=n;null!==ee;){n=!1,r=void 0;try{for(;null!==ee;){var l=ee.effectTag;if(36&l&&U(ee.alternate,ee),128&l&&H(ee),64&l)switch(o=ee,a=void 0,null!==te&&(a=te.get(o),te.delete(o),null==a&&null!==o.alternate&&(o=o.alternate,a=te.get(o),te.delete(o))),null==a&&d("184"),o.tag){case 2:o.stateNode.componentDidCatch(a.error,{componentStack:a.componentStack});break;case 3:null===oe&&(oe=a.error);break;default:d("157")}var c=ee.nextEffect;ee.nextEffect=null,ee=c}}catch(e){n=!0,r=e}n&&(null===ee&&d("178"),u(ee,r),null!==ee&&(ee=ee.nextEffect))}return G=ie=!1,cr(e.stateNode),re&&(re.forEach(y),re=null),null!==oe&&(e=oe,oe=null,k(e)),0===(t=t.current.expirationTime)&&(ne=te=null),t}function n(e){for(;;){var t=I(e.alternate,e,Z),n=e.return,r=e.sibling,o=e;if(2147483647===Z||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var a=0;else a=null===(a=o.updateQueue)?0:a.expirationTime;for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){e.stateNode.isReadyForCommit=!0;break}e=n}return null}function r(e){var t=N(e.alternate,e,Z);return null===t&&(t=n(e)),Ft.current=null,t}function o(e){var t=j(e.alternate,e,Z);return null===t&&(t=n(e)),Ft.current=null,t}function a(e){if(null!==te){if(!(0===Z||Z>e))if(Z<=Y)for(;null!==X;)X=l(X)?o(X):r(X);else for(;null!==X&&!E();)X=l(X)?o(X):r(X)}else if(!(0===Z||Z>e))if(Z<=Y)for(;null!==X;)X=r(X);else for(;null!==X&&!E();)X=r(X)}function i(e,t){if(G&&d("243"),G=!0,e.isReadyForCommit=!1,e!==J||t!==Z||null===X){for(;-1<Un;)Dn[Un]=null,Un--;Bn=f,zn.current=f,Vn.current=!1,_(),Z=t,X=Zn((J=e).current,null,t)}var n=!1,r=null;try{a(t)}catch(e){n=!0,r=e}for(;n;){if(ae){oe=r;break}var i=X;if(null===i)ae=!0;else{var l=u(i,r);if(null===l&&d("183"),!ae){try{for(r=t,l=n=l;null!==i;){switch(i.tag){case 2:$n(i);break;case 5:S(i);break;case 3:P(i);break;case 4:P(i)}if(i===l||i.alternate===l)break;i=i.return}X=o(n),a(r)}catch(e){n=!0,r=e;continue}break}}}return t=oe,ae=G=!1,oe=null,null!==t&&k(t),e.isReadyForCommit?e.current.alternate:null}function u(e,t){var n=Ft.current=null,r=!1,o=!1,a=null;if(3===e.tag)n=e,c(e)&&(ae=!0);else for(var i=e.return;null!==i&&null===n;){if(2===i.tag?"function"==typeof i.stateNode.componentDidCatch&&(r=!0,a=zt(i),n=i,o=!0):3===i.tag&&(n=i),c(i)){if(ue||null!==re&&(re.has(i)||null!==i.alternate&&re.has(i.alternate)))return null;n=null,o=!1}i=i.return}if(null!==n){null===ne&&(ne=new Set),ne.add(n);var u="";i=e;do{e:switch(i.tag){case 0:case 1:case 2:case 5:var l=i._debugOwner,s=i._debugSource,p=zt(i),f=null;l&&(f=zt(l)),l=s,p="\n    in "+(p||"Unknown")+(l?" (at "+l.fileName.replace(/^.*[\\\/]/,"")+":"+l.lineNumber+")":f?" (created by "+f+")":"");break e;default:p=""}u+=p,i=i.return}while(i);i=u,e=zt(e),null===te&&(te=new Map),t={componentName:e,componentStack:i,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:a,willRetry:o},te.set(n,t);try{var d=t.error;d&&d.suppressReactErrorLogging||console.error(d)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}return ie?(null===re&&(re=new Set),re.add(n)):y(n),n}return null===oe&&(oe=t),null}function l(e){return null!==te&&(te.has(e)||null!==e.alternate&&te.has(e.alternate))}function c(e){return null!==ne&&(ne.has(e)||null!==e.alternate&&ne.has(e.alternate))}function s(){return 20*(1+((v()+100)/20|0))}function p(e){return 0!==Q?Q:G?ie?1:Z:!W||1&e.internalContextTag?s():1}function h(e,t){return m(e,t)}function m(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!G&&n===J&&t<Z&&(X=J=null,Z=0);var r=n,o=t;if(xe>Ce&&d("185"),null===r.nextScheduledRoot)r.remainingExpirationTime=o,null===ce?(le=ce=r,r.nextScheduledRoot=r):(ce=ce.nextScheduledRoot=r).nextScheduledRoot=le;else{var a=r.remainingExpirationTime;(0===a||o<a)&&(r.remainingExpirationTime=o)}fe||(be?we&&x(de=r,he=1):1===o?C(1,null):g(o)),!G&&n===J&&t<Z&&(X=J=null,Z=0)}e=e.return}}function y(e){m(e,1)}function v(){return Y=2+((z()-$)/10|0)}function g(e){if(0!==se){if(e>se)return;B(pe)}var t=z()-$;se=e,pe=V(w,{timeout:10*(e-2)-t})}function b(){var e=0,t=null;if(null!==ce)for(var n=ce,r=le;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ce)&&d("244"),r===r.nextScheduledRoot){le=ce=r.nextScheduledRoot=null;break}if(r===le)le=o=r.nextScheduledRoot,ce.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ce){(ce=n).nextScheduledRoot=le,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ce)break;n=r,r=r.nextScheduledRoot}}null!==(n=de)&&n===t?xe++:xe=0,de=t,he=e}function w(e){C(0,e)}function C(e,t){for(ge=t,b();null!==de&&0!==he&&(0===e||he<=e)&&!me;)x(de,he),b();if(null!==ge&&(se=0,pe=-1),0!==he&&g(he),ge=null,me=!1,xe=0,ye)throw e=ve,ve=null,ye=!1,e}function x(e,n){if(fe&&d("245"),fe=!0,n<=v()){var r=e.finishedWork;null!==r?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=i(e,n))&&(e.remainingExpirationTime=t(r)))}else null!==(r=e.finishedWork)?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=i(e,n))&&(E()?e.finishedWork=r:e.remainingExpirationTime=t(r)));fe=!1}function E(){return!(null===ge||ge.timeRemaining()>Ee)&&(me=!0)}function k(e){null===de&&d("246"),de.remainingExpirationTime=0,ye||(ye=!0,ve=e)}var O=function(e){function t(e){return e===jr&&d("174"),e}var n=e.getChildHostContext,r=e.getRootHostContext,o={current:jr},a={current:jr},i={current:jr};return{getHostContext:function(){return t(o.current)},getRootHostContainer:function(){return t(i.current)},popHostContainer:function(e){Hn(o),Hn(a),Hn(i)},popHostContext:function(e){a.current===e&&(Hn(o),Hn(a))},pushHostContainer:function(e,t){Fn(i,t),t=r(t),Fn(a,e),Fn(o,t)},pushHostContext:function(e){var r=t(i.current),u=t(o.current);u!==(r=n(u,e.type,r))&&(Fn(a,e),Fn(o,r))},resetHostContainer:function(){o.current=jr,i.current=jr}}}(e),T=function(e){function t(e,t){var n=new Jn(5,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,c=e.hydrateInstance,s=e.hydrateTextInstance,p=null,f=null,h=!1;return{enterHydrationState:function(e){return f=l(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){f=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=f;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,f)}p=e,f=l(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return s(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=f;n;)t(e,n),n=u(n);return r(e),f=p?u(e.stateNode):null,!0}}}(e),P=O.popHostContainer,S=O.popHostContext,_=O.resetHostContainer,R=Nr(e,O,T,h,p),N=R.beginWork,j=R.beginFailedWork,I=function(e,t,n){function r(e){e.effectTag|=4}var o=e.createInstance,a=e.createTextInstance,i=e.appendInitialChild,u=e.finalizeInitialChildren,l=e.prepareUpdate,c=e.persistence,s=t.getRootHostContainer,p=t.popHostContext,f=t.getHostContext,h=t.popHostContainer,m=n.prepareToHydrateHostInstance,y=n.prepareToHydrateHostTextInstance,v=n.popHydrationState,g=void 0,b=void 0,w=void 0;return e.mutation?(g=function(){},b=function(e,t,n){(t.updateQueue=n)&&r(t)},w=function(e,t,n,o){n!==o&&r(t)}):d(c?"235":"236"),{completeWork:function(e,t,n){var c=t.pendingProps;switch(null===c?c=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==n||(t.pendingProps=null),t.tag){case 1:return null;case 2:return $n(t),null;case 3:return h(t),Hn(Vn),Hn(zn),(c=t.stateNode).pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==e&&null!==e.child||(v(t),t.effectTag&=-3),g(t),null;case 5:p(t),n=s();var C=t.type;if(null!==e&&null!=t.stateNode){var x=e.memoizedProps,E=t.stateNode,k=f();E=l(E,C,x,c,n,k),b(e,t,E,C,x,c,n),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!c)return null===t.stateNode&&d("166"),null;if(e=f(),v(t))m(t,n,e)&&r(t);else{e=o(C,c,n,e,t);e:for(x=t.child;null!==x;){if(5===x.tag||6===x.tag)i(e,x.stateNode);else if(4!==x.tag&&null!==x.child){x.child.return=x,x=x.child;continue}if(x===t)break;for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}u(e,C,c,n)&&r(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)w(e,t,e.memoizedProps,c);else{if("string"!=typeof c)return null===t.stateNode&&d("166"),null;e=s(),n=f(),v(t)?y(t)&&r(t):t.stateNode=a(c,e,n,t)}return null;case 7:(c=t.memoizedProps)||d("165"),t.tag=8,C=[];e:for((x=t.stateNode)&&(x.return=t);null!==x;){if(5===x.tag||6===x.tag||4===x.tag)d("247");else if(9===x.tag)C.push(x.type);else if(null!==x.child){x.child.return=x,x=x.child;continue}for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}return c=(x=c.handler)(c.props,C),t.child=_r(t,null!==e?e.child:null,c,n),t.child;case 8:return t.tag=7,null;case 9:case 10:return null;case 4:return h(t),g(t),null;case 0:d("167");default:d("156")}}}}(e,O,T).completeWork,M=(O=function(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function r(e){switch(sr(e),e.tag){case 2:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case 5:n(e);break;case 7:o(e.stateNode);break;case 4:l&&i(e)}}function o(e){for(var t=e;;)if(r(t),null===t.child||l&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function a(e){return 5===e.tag||3===e.tag||4===e.tag}function i(e){for(var t=e,n=!1,a=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:a=n.stateNode,i=!1;break e;case 3:case 4:a=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)o(t),i?b(a,t.stateNode):g(a,t.stateNode);else if(4===t.tag?a=t.stateNode.containerInfo:r(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var u=e.getPublicInstance,l=e.mutation;e=e.persistence,l||d(e?"235":"236");var c=l.commitMount,s=l.commitUpdate,p=l.resetTextContent,f=l.commitTextUpdate,h=l.appendChild,m=l.appendChildToContainer,y=l.insertBefore,v=l.insertInContainerBefore,g=l.removeChild,b=l.removeChildFromContainer;return{commitResetTextContent:function(e){p(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(a(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(p(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||a(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?v(t,o.stateNode,n):y(t,o.stateNode,n):r?m(t,o.stateNode):h(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){i(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&s(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,f(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t){switch(t.tag){case 2:var n=t.stateNode;if(4&t.effectTag)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(r,e)}null!==(t=t.updateQueue)&&yr(t,n);break;case 3:null!==(n=t.updateQueue)&&yr(n,null!==t.child?t.child.stateNode:null);break;case 5:n=t.stateNode,null===e&&4&t.effectTag&&c(n,t.type,t.memoizedProps,t);break;case 6:case 4:break;default:d("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:t(u(n));break;default:t(n)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}(e,u)).commitResetTextContent,A=O.commitPlacement,L=O.commitDeletion,D=O.commitWork,U=O.commitLifeCycles,H=O.commitAttachRef,F=O.commitDetachRef,z=e.now,V=e.scheduleDeferredCallback,B=e.cancelDeferredCallback,W=e.useSyncScheduling,q=e.prepareForCommit,K=e.resetAfterCommit,$=z(),Y=2,Q=0,G=!1,X=null,J=null,Z=0,ee=null,te=null,ne=null,re=null,oe=null,ae=!1,ie=!1,ue=!1,le=null,ce=null,se=0,pe=-1,fe=!1,de=null,he=0,me=!1,ye=!1,ve=null,ge=null,be=!1,we=!1,Ce=1e3,xe=0,Ee=1;return{computeAsyncExpiration:s,computeExpirationForFiber:p,scheduleWork:h,batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||fe||C(1,null)}},unbatchedUpdates:function(e){if(be&&!we){we=!0;try{return e()}finally{we=!1}}return e()},flushSync:function(e){var t=be;be=!0;try{e:{var n=Q;Q=1;try{var r=e();break e}finally{Q=n}r=void 0}return r}finally{be=t,fe&&d("187"),C(1,null)}},deferredUpdates:function(e){var t=Q;Q=s();try{return e()}finally{Q=t}}}}function Mr(e){function t(e){return null===(e=function(e){if(!(e=qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var n=e.getPublicInstance,r=(e=Ir(e)).computeAsyncExpiration,o=e.computeExpirationForFiber,i=e.scheduleWork;return{createContainer:function(e,t){var n=new Jn(3,null,0);return e={current:n,containerInfo:e,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},n.stateNode=e},updateContainer:function(e,t,n,a){var u=t.current;if(n){var l;n=n._reactInternalFiber;e:{for(2===Vt(n)&&2===n.tag||d("170"),l=n;3!==l.tag;){if(Kn(l)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}(l=l.return)||d("171")}l=l.stateNode.context}n=Kn(n)?Qn(n,l):l}else n=f;null===t.context?t.context=n:t.pendingContext=n,t=void 0===(t=a)?null:t,dr(u,{expirationTime:a=null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent?r():o(u),partialState:{element:e},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),i(u,a)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var n=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ir=lr(function(e){return t.onCommitFiberRoot(n,e)}),ur=lr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return t(e)},findFiberByHostInstance:function(e){return n?n(e):null}}))}}}var Ar=Object.freeze({default:Mr}),Lr=Ar&&Mr||Ar,Dr=Lr.default?Lr.default:Lr;var Ur="object"==typeof performance&&"function"==typeof performance.now,Hr=void 0;Hr=Ur?function(){return performance.now()}:function(){return Date.now()};var Fr=void 0,zr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Vr,Br=null,Wr=!1,qr=-1,Kr=!1,$r=0,Yr=33,Qr=33;Vr=Ur?{didTimeout:!1,timeRemaining:function(){var e=$r-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=$r-Date.now();return 0<e?e:0}};var Gr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Gr){if(Wr=!1,e=Hr(),0>=$r-e){if(!(-1!==qr&&qr<=e))return void(Kr||(Kr=!0,requestAnimationFrame(Xr)));Vr.didTimeout=!0}else Vr.didTimeout=!1;qr=-1,e=Br,Br=null,null!==e&&e(Vr)}},!1);var Xr=function(e){Kr=!1;var t=e-$r+Qr;t<Qr&&Yr<Qr?(8>t&&(t=8),Qr=t<Yr?Yr:t):Yr=t,$r=e+Qr,Wr||(Wr=!0,window.postMessage(Gr,"*"))};Fr=function(e,t){return Br=e,null!=t&&"number"==typeof t.timeout&&(qr=Hr()+t.timeout),Kr||(Kr=!0,requestAnimationFrame(Xr)),0},zr=function(){Br=null,Wr=!1,qr=-1}}else Fr=window.requestIdleCallback,zr=window.cancelIdleCallback;else Fr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})})},zr=function(e){clearTimeout(e)};var Jr=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Zr={},eo={};function to(e,t,n){var r=b(t);if(r&&g(t,n)){var o=r.mutationMethod;o?o(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?ro(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(o=r.attributeNamespace)?e.setAttributeNS(o,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else no(e,t,g(t,n)?n:null)}function no(e,t,n){(function(e){return!!eo.hasOwnProperty(e)||!Zr.hasOwnProperty(e)&&(Jr.test(e)?eo[e]=!0:(Zr[e]=!0,!1))})(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))}function ro(e,t){var n=b(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}function oo(e,t){var n=t.value,r=t.checked;return a({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})}function ao(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function io(e,t){null!=(t=t.checked)&&to(e,"checked",t)}function uo(e,t){io(e,t);var n=t.value;null!=n?0===n&&""===e.value?e.value="0":"number"===t.type?(n!=(t=parseFloat(e.value)||0)||n==t&&e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))}function lo(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function co(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function so(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function po(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function fo(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ho(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function mo(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function yo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var vo="http://www.w3.org/1999/xhtml",go="http://www.w3.org/2000/svg";function bo(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function wo(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?bo(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Co,xo=void 0,Eo=(Co=function(e,t){if(e.namespaceURI!==go||"innerHTML"in e)e.innerHTML=t;else{for((xo=xo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=xo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Co(e,t)})}:Co);function ko(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Oo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},To=["Webkit","ms","Moz","O"];function Po(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Oo.hasOwnProperty(o)&&Oo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Oo).forEach(function(e){To.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Oo[t]=Oo[e]})});var So=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function _o(e,t,n){t&&(So[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function Ro(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var No=vo,jo=i.thatReturns("");function Io(e,t){var n=pn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=B[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Jt("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Jt("topFocus","focus",e),Jt("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(ht("cancel",!0)&&Jt("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(ht("close",!0)&&Jt("topClose","close",e),n.topClose=!0):un.hasOwnProperty(o)&&Xt(o,un[o],e),n[o]=!0)}}var Mo={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function Ao(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===No&&(r=bo(e)),r===No?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Lo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Do(e,t,n,r){var o=Ro(t,n);switch(t){case"iframe":case"object":Xt("topLoad","load",e);var u=n;break;case"video":case"audio":for(u in Mo)Mo.hasOwnProperty(u)&&Xt(u,Mo[u],e);u=n;break;case"source":Xt("topError","error",e),u=n;break;case"img":case"image":Xt("topError","error",e),Xt("topLoad","load",e),u=n;break;case"form":Xt("topReset","reset",e),Xt("topSubmit","submit",e),u=n;break;case"details":Xt("topToggle","toggle",e),u=n;break;case"input":ao(e,n),u=oo(e,n),Xt("topInvalid","invalid",e),Io(r,"onChange");break;case"option":u=co(e,n);break;case"select":po(e,n),u=a({},n,{value:void 0}),Xt("topInvalid","invalid",e),Io(r,"onChange");break;case"textarea":ho(e,n),u=fo(e,n),Xt("topInvalid","invalid",e),Io(r,"onChange");break;default:u=n}_o(t,u,jo);var l,c=u;for(l in c)if(c.hasOwnProperty(l)){var s=c[l];"style"===l?Po(e,s):"dangerouslySetInnerHTML"===l?null!=(s=s?s.__html:void 0)&&Eo(e,s):"children"===l?"string"==typeof s?("textarea"!==t||""!==s)&&ko(e,s):"number"==typeof s&&ko(e,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(V.hasOwnProperty(l)?null!=s&&Io(r,l):o?no(e,l,s):null!=s&&to(e,l,s))}switch(t){case"input":yt(e),lo(e,n);break;case"textarea":yt(e),yo(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?so(e,!!n.multiple,t,!1):null!=n.defaultValue&&so(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=i)}}function Uo(e,t,n,r,o){var u,l,c=null;switch(t){case"input":n=oo(e,n),r=oo(e,r),c=[];break;case"option":n=co(e,n),r=co(e,r),c=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),c=[];break;case"textarea":n=fo(e,n),r=fo(e,r),c=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=i)}for(u in _o(t,r,jo),e=null,n)if(!r.hasOwnProperty(u)&&n.hasOwnProperty(u)&&null!=n[u])if("style"===u)for(l in t=n[u])t.hasOwnProperty(l)&&(e||(e={}),e[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(V.hasOwnProperty(u)?c||(c=[]):(c=c||[]).push(u,null));for(u in r){var s=r[u];if(t=null!=n?n[u]:void 0,r.hasOwnProperty(u)&&s!==t&&(null!=s||null!=t))if("style"===u)if(t){for(l in t)!t.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(e||(e={}),e[l]="");for(l in s)s.hasOwnProperty(l)&&t[l]!==s[l]&&(e||(e={}),e[l]=s[l])}else e||(c||(c=[]),c.push(u,e)),e=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,t=t?t.__html:void 0,null!=s&&t!==s&&(c=c||[]).push(u,""+s)):"children"===u?t===s||"string"!=typeof s&&"number"!=typeof s||(c=c||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(V.hasOwnProperty(u)?(null!=s&&Io(o,u),c||t===s||(c=[])):(c=c||[]).push(u,s))}return e&&(c=c||[]).push("style",e),c}function Ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&io(e,o),Ro(n,r),r=Ro(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],u=t[a+1];"style"===i?Po(e,u):"dangerouslySetInnerHTML"===i?Eo(e,u):"children"===i?ko(e,u):r?null!=u?no(e,i,u):e.removeAttribute(i):null!=u?to(e,i,u):ro(e,i)}switch(n){case"input":uo(e,o);break;case"textarea":mo(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?so(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?so(e,!!o.multiple,o.defaultValue,!0):so(e,!!o.multiple,o.multiple?[]:"",!1))}}function Fo(e,t,n,r,o){switch(t){case"iframe":case"object":Xt("topLoad","load",e);break;case"video":case"audio":for(var a in Mo)Mo.hasOwnProperty(a)&&Xt(a,Mo[a],e);break;case"source":Xt("topError","error",e);break;case"img":case"image":Xt("topError","error",e),Xt("topLoad","load",e);break;case"form":Xt("topReset","reset",e),Xt("topSubmit","submit",e);break;case"details":Xt("topToggle","toggle",e);break;case"input":ao(e,n),Xt("topInvalid","invalid",e),Io(o,"onChange");break;case"select":po(e,n),Xt("topInvalid","invalid",e),Io(o,"onChange");break;case"textarea":ho(e,n),Xt("topInvalid","invalid",e),Io(o,"onChange")}for(var u in _o(t,n,jo),r=null,n)n.hasOwnProperty(u)&&(a=n[u],"children"===u?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):V.hasOwnProperty(u)&&null!=a&&Io(o,u));switch(t){case"input":yt(e),lo(e,n);break;case"textarea":yt(e),yo(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=i)}return r}function zo(e,t){return e.nodeValue!==t}var Vo=Object.freeze({createElement:Ao,createTextNode:Lo,setInitialProperties:Do,diffProperties:Uo,updateProperties:Ho,diffHydratedProperties:Fo,diffHydratedText:zo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(uo(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=he(r);o||d("90"),vt(r),uo(r,o)}}}break;case"textarea":mo(e,n);break;case"select":null!=(t=n.value)&&so(e,!!n.multiple,t,!1)}}});rt.injectFiberControlledHostComponent(Vo);var Bo=null,Wo=null;function qo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}var Ko=Dr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:wo(null,"");break;default:e=wo(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return wo(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Bo=Yt;var e=l();if(hn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,u=-1,c=0,s=0,p=e,f=null;t:for(;;){for(var d;p!==t||0!==r&&3!==p.nodeType||(i=a+r),p!==o||0!==n&&3!==p.nodeType||(u=a+n),3===p.nodeType&&(a+=p.nodeValue.length),null!==(d=p.firstChild);)f=p,p=d;for(;;){if(p===e)break t;if(f===t&&++c===r&&(i=a),f===o&&++s===n&&(u=a),null!==(d=p.nextSibling))break;f=(p=f).parentNode}p=d}t=-1===i||-1===u?null:{start:i,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;Wo={focusedElem:e,selectionRange:t},Gt(!1)},resetAfterCommit:function(){var e=Wo,t=l(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&s(document.documentElement,n)){if(hn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[Pe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=dn(n,e);var a=dn(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(p(n),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}Wo=null,Gt(Bo),Bo=null},createInstance:function(e,t,n,r,o){return(e=Ao(e,t,n,r))[se]=o,e[pe]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){Do(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,o){return Uo(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=Lo(e,t))[se]=r,e},now:Hr,mutation:{commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,o){e[pe]=o,Ho(e,t,n,r,o)},resetTextContent:function(e){e.textContent=""},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[se]=a,e[pe]=n,Fo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[se]=n,zo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Fr,cancelDeferredCallback:zr,useSyncScheduling:!0});function $o(e,t,n,r,o){qo(n)||d("200");var a=n._reactRootContainer;if(a)Ko.updateContainer(t,a,e,o);else{if(!(r=r||function(e){return!(!(e=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))}(n)))for(a=void 0;a=n.lastChild;)n.removeChild(a);var i=Ko.createContainer(n,r);a=n._reactRootContainer=i,Ko.unbatchedUpdates(function(){Ko.updateContainer(t,i,e,o)})}return Ko.getPublicRootInstance(a)}function Yo(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return qo(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Cr,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}function Qo(e,t){this._reactRootContainer=Ko.createContainer(e,t)}ut=Ko.batchedUpdates,Qo.prototype.render=function(e,t){Ko.updateContainer(e,this._reactRootContainer,null,t)},Qo.prototype.unmount=function(e){Ko.updateContainer(null,this._reactRootContainer,null,e)};var Go={createPortal:Yo,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return Ko.findHostInstance(t);"function"==typeof e.render?d("188"):d("213",Object.keys(e))},hydrate:function(e,t,n){return $o(null,e,t,!0,n)},render:function(e,t,n){return $o(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),$o(e,t,n,!1,r)},unmountComponentAtNode:function(e){return qo(e)||d("40"),!!e._reactRootContainer&&(Ko.unbatchedUpdates(function(){$o(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:Yo,unstable_batchedUpdates:ct,unstable_deferredUpdates:Ko.deferredUpdates,flushSync:Ko.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:le,EventPluginRegistry:K,EventPropagators:Oe,ReactControlledComponent:it,ReactDOMComponentTree:me,ReactDOMEventListener:en}};Ko.injectIntoDevTools({findFiberByHostInstance:fe,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var Xo=Object.freeze({default:Go}),Jo=Xo&&Go||Xo;e.exports=Jo.default?Jo.default:Jo},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(33)},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(12),o=n(11),a=n(5),i="function"==typeof Symbol&&Symbol.for,u=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.call"):60104,c=i?Symbol.for("react.return"):60105,s=i?Symbol.for("react.portal"):60106,p=i?Symbol.for("react.fragment"):60107,f="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function m(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function y(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}function v(){}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&d("85"),this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var g=y.prototype=new v;function b(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||h}g.constructor=y,r(g,m.prototype),g.isPureReactComponent=!0;var w=b.prototype=new v;w.constructor=b,r(w,m.prototype),w.unstable_isAsyncReactComponent=!0,w.render=function(){return this.props.children};var C={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:a,ref:i,props:o,_owner:C.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var T=/\/+/g,P=[];function S(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function _(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case u:case l:case c:case s:a=!0}}if(a)return n(r,e,""===t?"."+N(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var p=t+N(o=e[i],i);a+=R(o,p,n,r)}else if(null===e||void 0===e?p=null:p="function"==typeof(p=f&&e[f]||e["@@iterator"])?p:null,"function"==typeof p)for(e=p.call(e),i=0;!(o=e.next()).done;)a+=R(o=o.value,p=t+N(o,i++),n,r);else"object"===o&&d("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,a.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function M(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),t=S(t,a,r,o),null==e||R(e,"",I,t),_(t)}var A={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=S(null,null,t,n),null==e||R(e,"",j,t),_(t)},count:function(e){return null==e?0:R(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,a.thatReturnsArgument),t},only:function(e){return O(e)||d("143"),e}},Component:m,PureComponent:y,unstable_AsyncComponent:b,Fragment:p,createElement:k,cloneElement:function(e,t,n){var o=r({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)x.call(t,s)&&!E.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var p=0;p<s;p++)c[p]=arguments[p+2];o.children=c}return{$$typeof:u,type:e.type,key:a,ref:i,props:o,_owner:l}},createFactory:function(e){var t=k.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:r}},L=Object.freeze({default:A}),D=L&&A||L;e.exports=D.default?D.default:D},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(2)),a=c(n(34)),i=n(18),u=c(n(20)),l=c(n(19));function c(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={msg:"App"},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.state.msg;return o.default.createElement("div",null,o.default.createElement("h2",null,e),o.default.createElement(i.BrowserRouter,null,o.default.createElement("div",{className:"container"},o.default.createElement("ul",{className:"nav"},o.default.createElement("li",null,o.default.createElement(i.NavLink,{exact:!0,to:"/"},"首页")),o.default.createElement("li",null,o.default.createElement(i.NavLink,{to:"/news"},"News"))),o.default.createElement("div",{className:"route-list"},o.default.createElement(i.Route,{exact:!0,path:"/",component:u.default}),o.default.createElement(i.Route,{exact:!0,path:"/news",component:l.default})))))}}]),t}();a.default.render(o.default.createElement(s,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19wcm9wLXR5cGVzQDE1LjYuMUBwcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fd2FybmluZ0AzLjAuMEB3YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdEAxNi4yLjBAcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19pbnZhcmlhbnRAMi4yLjRAaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19oaXN0b3J5QDQuNy4yQGhpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fZmJqc0AwLjguMTZAZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2hpc3RvcnlANC43LjJAaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2hpc3RvcnlANC43LjJAaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fdmFsdWUtZXF1YWxAMC40LjBAdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZXNvbHZlLXBhdGhuYW1lQDIuMi4wQHJlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19oaXN0b3J5QDQuNy4yQGhpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19mYmpzQDAuOC4xNkBmYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX29iamVjdC1hc3NpZ25ANC4xLjFAb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzQDIuNS4wQGhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcGF0aC10by1yZWdleHBAMS43LjBAcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19oaXN0b3J5QDQuNy4yQGhpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2hpc3RvcnlANC43LjJAaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2hpc3RvcnlANC43LjJAaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlckA0LjIuMEByZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyLWRvbUA0LjIuMkByZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlci1kb21ANC4yLjJAcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyLWRvbUA0LjIuMkByZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1yb3V0ZXItZG9tQDQuMi4yQHJlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlckA0LjIuMEByZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyLWRvbUA0LjIuMkByZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlckA0LjIuMEByZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyQDQuMi4wQHJlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlci1kb21ANC4yLjJAcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlci1kb21ANC4yLjJAcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyQDQuMi4wQHJlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1yb3V0ZXItZG9tQDQuMi4yQHJlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9faGlzdG9yeUA0LjcuMkBoaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19oaXN0b3J5QDQuNy4yQGhpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9faGlzdG9yeUA0LjcuMkBoaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9faGlzdG9yeUA0LjcuMkBoaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9faGlzdG9yeUA0LjcuMkBoaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9faGlzdG9yeUA0LjcuMkBoaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1yb3V0ZXJANC4yLjBAcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyLWRvbUA0LjIuMkByZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyQDQuMi4wQHJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1yb3V0ZXItZG9tQDQuMi4yQHJlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyQDQuMi4wQHJlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1yb3V0ZXItZG9tQDQuMi4yQHJlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcmVhY3Qtcm91dGVyLWRvbUA0LjIuMkByZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlckA0LjIuMEByZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LXJvdXRlci1kb21ANC4yLjJAcmVhY3Qtcm91dGVyLWRvbS9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL05ld3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2lzYXJyYXlAMC4wLjFAaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3Byb3AtdHlwZXNAMTUuNi4xQHByb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fZmJqc0AwLjguMTZAZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fcHJvcC10eXBlc0AxNS42LjFAcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19mYmpzQDAuOC4xNkBmYmpzL2xpYi9mb2N1c05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19mYmpzQDAuOC4xNkBmYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19mYmpzQDAuOC4xNkBmYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fZmJqc0AwLjguMTZAZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fZmJqc0AwLjguMTZAZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fZmJqc0AwLjguMTZAZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX2ZianNAMC44LjE2QGZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19mYmpzQDAuOC4xNkBmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0LWRvbUAxNi4yLjBAcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19yZWFjdC1kb21AMTYuMi4wQHJlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3JlYWN0QDE2LjIuMEByZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJuZXdTdGF0dXMiLCJpIiwibGVuZ3RoIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90Q2hlY2siLCJhcHBseSIsIkVycm9yIiwicmVxdWVzdFRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVxdWVzdFBhdGgiLCJwIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwidW5kZWZpbmVkIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJjaGFyQXQiLCJzdHJpcExlYWRpbmdTbGFzaCIsInN1YnN0ciIsImhhc0Jhc2VuYW1lIiwicHJlZml4IiwiUmVnRXhwIiwidGVzdCIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50Iiwib2JqIiwiX3dhcm5pbmciLCJfd2FybmluZzIiLCJkZWZhdWx0IiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiYXJndW1lbnRzIiwiZmlsdGVyIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIkFycmF5IiwiX2tleSIsImxvY2F0aW9uc0FyZUVxdWFsIiwiY3JlYXRlTG9jYXRpb24iLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImtleSIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwidmFsdWVFcXVhbCIsImlzQXJyYXkiLCJldmVyeSIsImluZGV4IiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJsaXN0IiwiayIsInRvIiwiZnJvbSIsInRvUGFydHMiLCJzcGxpdCIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwiY2FuVXNlRE9NIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJldmVudCIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwibWVzc2FnZSIsImNvbmZpcm0iLCJzdXBwb3J0c0hpc3RvcnkiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJmYWN0b3J5IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsIm9mZnNldCIsIm5leHQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsInN0cmluZ2lmeSIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9Mb2NhdGlvblV0aWxzIiwiX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJNYXRoIiwibWluIiwibWF4IiwicHJvcHMiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImVudHJpZXMiLCJjcmVhdGVLZXkiLCJyYW5kb20iLCJlbnRyeSIsImNyZWF0ZUhyZWYiLCJnbyIsIm5leHRJbmRleCIsIm9rIiwibmV4dEVudHJpZXMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJjYW5HbyIsImJsb2NrIiwibGlzdGVuIiwiX2ludmFyaWFudDIiLCJfRE9NVXRpbHMiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsImhyZWYiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJnbG9iYWxIaXN0b3J5IiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJiYXNlbmFtZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImdldERPTUxvY2F0aW9uIiwiZm9yY2VOZXh0UG9wIiwiaWdub3JlUGF0aCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImhhbmRsZVBvcCIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImZyb21JbmRleCIsImRlbHRhIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwidW5ibG9jayIsInVubGlzdGVuIiwiZ2V0SGlzdG9yeVN0YXRlIiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiaGFuZGxlUG9wU3RhdGUiLCJhbGxLZXlzIiwicHVzaFN0YXRlIiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJSb3V0ZXJfZXh0ZW5kcyIsIlJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiUm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfdGVtcCIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNvbXB1dGVNYXRjaCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIndyaXRhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJSb3V0ZXJfaW5oZXJpdHMiLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZXIiLCJjb250ZXh0IiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsImNvbXBvbmVudFdpbGxNb3VudCIsIl90aGlzMiIsIl9wcm9wcyIsIl9pbnZhcmlhbnRfMl8yXzRfaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsIl9yZWFjdF8xNl8yXzBfcmVhY3RfZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiYnJvd3Nlcl9kZWZhdWx0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJvbmx5IiwiQ29tcG9uZW50IiwiX3Byb3BfdHlwZXNfMTVfNl8xX3Byb3BfdHlwZXNfZGVmYXVsdCIsImlzUmVxdWlyZWQiLCJlc19Sb3V0ZXIiLCJfcmVhY3Rfcm91dGVyX2RvbV80XzJfMl9yZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfZGVmYXVsdCIsIkJyb3dzZXJSb3V0ZXJfaW5oZXJpdHMiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIm51bWJlciIsImVzX0Jyb3dzZXJSb3V0ZXIiLCJIYXNoUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJIYXNoUm91dGVyX0hhc2hSb3V0ZXIiLCJIYXNoUm91dGVyIiwiSGFzaFJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZUhhc2hIaXN0b3J5X2RlZmF1bHQiLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTGlua19pc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGlua19MaW5rIiwiTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVDbGljayIsIm9uQ2xpY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwicHJldmVudERlZmF1bHQiLCJfdGhpcyRwcm9wcyIsIkxpbmtfaW5oZXJpdHMiLCJpbm5lclJlZiIsIkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyZWYiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImVzX0xpbmsiLCJNZW1vcnlSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIk1lbW9yeVJvdXRlcl9NZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXIiLCJNZW1vcnlSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVNZW1vcnlIaXN0b3J5X2RlZmF1bHQiLCJNZW1vcnlSb3V0ZXJfaW5oZXJpdHMiLCJhcnJheSIsIl9yZWFjdF9yb3V0ZXJfZG9tXzRfMl8yX3JlYWN0X3JvdXRlcl9kb21fZXNfTWVtb3J5Um91dGVyIiwibWF0Y2hQYXRoX3BhdHRlcm5DYWNoZSIsIm1hdGNoUGF0aF9jYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwiY2FjaGUiLCJjb21waWxlZFBhdHRlcm4iLCJfcGF0aF90b19yZWdleHBfMV83XzBfcGF0aF90b19yZWdleHBfZGVmYXVsdCIsIm1hdGNoUGF0aF9jb21waWxlUGF0aCIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwiX3JlYWN0X3JvdXRlcl9kb21fNF8yXzJfcmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJzdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9yZWYyIiwiYXJpYS1jdXJyZW50IiwiZXNfTmF2TGluayIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsImRpc2FibGUiLCJ3aGVuIiwiX3JlYWN0X3JvdXRlcl9kb21fNF8yXzJfcmVhY3Rfcm91dGVyX2RvbV9lc19Qcm9tcHQiLCJMb2NhdGlvblV0aWxzX2V4dGVuZHMiLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiX3Jlc29sdmVfcGF0aG5hbWVfMl8yXzBfcmVzb2x2ZV9wYXRobmFtZSIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJfdmFsdWVfZXF1YWxfMF80XzBfdmFsdWVfZXF1YWwiLCJSZWRpcmVjdF9SZWRpcmVjdCIsIlJlZGlyZWN0IiwiUmVkaXJlY3RfY2xhc3NDYWxsQ2hlY2siLCJSZWRpcmVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVkaXJlY3RfaW5oZXJpdHMiLCJpc1N0YXRpYyIsInBlcmZvcm0iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsIl9yZWFjdF9yb3V0ZXJfZG9tXzRfMl8yX3JlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZEJhc2VuYW1lIiwiUGF0aFV0aWxzIiwiU3RhdGljUm91dGVyX2NyZWF0ZUxvY2F0aW9uIiwiX29iamVjdCRwYXRobmFtZSIsIl9vYmplY3Qkc2VhcmNoIiwiX29iamVjdCRoYXNoIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIlN0YXRpY1JvdXRlcl9ub29wIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJiYXNlIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJfcmVhY3Rfcm91dGVyX2RvbV80XzJfMl9yZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImVsZW1lbnQiLCJpc1ZhbGlkRWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjbG9uZUVsZW1lbnQiLCJfcmVhY3Rfcm91dGVyX2RvbV80XzJfMl9yZWFjdF9yb3V0ZXJfZG9tX2VzX1N3aXRjaCIsIl9yZWFjdF9yb3V0ZXJfZG9tXzRfMl8yX3JlYWN0X3JvdXRlcl9kb21fZXNfbWF0Y2hQYXRoIiwid2l0aFJvdXRlcl9leHRlbmRzIiwiX3JlYWN0X3JvdXRlcl9kb21fNF8yXzJfcmVhY3Rfcm91dGVyX2RvbV9lc193aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwiV3JhcHBlZENvbXBvbmVudCIsIl9ob2lzdF9ub25fcmVhY3Rfc3RhdGljc18yXzVfMF9ob2lzdF9ub25fcmVhY3Rfc3RhdGljc19kZWZhdWx0IiwiX3JlYWN0IiwiTmV3cyIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwibXNnIiwiX3JlYWN0MiIsIkhvbWUiLCJhcnIiLCJ2YWxpZGF0ZUZvcm1hdCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImZvY3VzIiwiZGVmYXVsdFZpZXciLCJvd25lckRvY3VtZW50IiwiTm9kZSIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwicGFyZW50Tm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJpcyIsIngiLCJ5Iiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJFdmVudExpc3RlbmVyIiwiZXZlbnRUeXBlIiwicmVtb3ZlIiwicmVnaXN0ZXJEZWZhdWx0IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJhYSIsIkIiLCJiYSIsImRhIiwiZWEiLCJmYSIsImlhIiwiRCIsIkUiLCJvYSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdENoZWNrZWQiLCJpbm5lckhUTUwiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJwYSIsInRhIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJQcm9wZXJ0aWVzIiwiRE9NQXR0cmlidXRlTmFtZXNwYWNlcyIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwiZyIsInRvTG93ZXJDYXNlIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsInByb3BlcnR5TmFtZSIsIm11dGF0aW9uTWV0aG9kIiwibXVzdFVzZVByb3BlcnR5IiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiaGFzU3RyaW5nQm9vbGVhblZhbHVlIiwidmEiLCJ3YSIsInhhIiwieWEiLCJLIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsImFsbG93RnVsbFNjcmVlbiIsImFzeW5jIiwiYXV0b0ZvY3VzIiwiYXV0b1BsYXkiLCJjaGVja2VkIiwiY29scyIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRyb2xzIiwiZGVmZXIiLCJkaXNhYmxlZCIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZm9ybU5vVmFsaWRhdGUiLCJoaWRkZW4iLCJsb29wIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJwbGF5c0lubGluZSIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvd3MiLCJyb3dTcGFuIiwic2NvcGVkIiwic2VhbWxlc3MiLCJzZWxlY3RlZCIsInNpemUiLCJzdGFydCIsInNwYW4iLCJzcGVsbENoZWNrIiwidGFiSW5kZXgiLCJpdGVtU2NvcGUiLCJhY2NlcHRDaGFyc2V0IiwiaHRtbEZvciIsImh0dHBFcXVpdiIsInJlbW92ZUF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJFYSIsIk0iLCJHYSIsImF1dG9SZXZlcnNlIiwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCIsInByZXNlcnZlQWxwaGEiLCJ4bGlua0FjdHVhdGUiLCJ4bGlua0FyY3JvbGUiLCJ4bGlua0hyZWYiLCJ4bGlua1JvbGUiLCJ4bGlua1Nob3ciLCJ4bGlua1RpdGxlIiwieGxpbmtUeXBlIiwieG1sQmFzZSIsInhtbExhbmciLCJ4bWxTcGFjZSIsIkhhIiwiSWEiLCJQIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbmplY3Rpb24iLCJpbmplY3RFcnJvclV0aWxzIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiSmEiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsInEiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwidiIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJQYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiUWEiLCJyZWdpc3RyYXRpb25OYW1lIiwiUmEiLCJTYSIsImRlcGVuZGVuY2llcyIsIlRhIiwiVWEiLCJWYSIsImZyZWV6ZSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIldhIiwiWGEiLCJZYSIsIlphIiwiY3VycmVudFRhcmdldCIsIiRhIiwiYWIiLCJiYiIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsImRiIiwiZ2IiLCJoYiIsImliIiwic3RhdGVOb2RlIiwiamIiLCJrYiIsImxiIiwibWIiLCJnZXRMaXN0ZW5lciIsImVucXVldWVFdmVudHMiLCJwcm9jZXNzRXZlbnRRdWV1ZSIsIm5iIiwiUSIsIm9iIiwicGIiLCJ0YWciLCJxYiIsInJiIiwic2IiLCJwcmVjYWNoZUZpYmVyTm9kZSIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwidXBkYXRlRmliZXJQcm9wcyIsInRiIiwidWIiLCJ2YiIsImRpc3BhdGNoQ29uZmlnIiwid2IiLCJfdGFyZ2V0SW5zdCIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJhbHRlcm5hdGUiLCJDYiIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiRGIiLCJFYiIsImRvY3VtZW50RWxlbWVudCIsIlMiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiVCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJLYiIsImV2ZW50UG9vbCIsIkxiIiwiZGVzdHJ1Y3RvciIsIkpiIiwiZ2V0UG9vbGVkIiwiTWIiLCJOYiIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJhdWdtZW50Q2xhc3MiLCJYYiIsIlBiIiwiVmIiLCJXYiIsImRvY3VtZW50TW9kZSIsIlliIiwib3BlcmEiLCJ2ZXJzaW9uIiwicGFyc2VJbnQiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJjYyIsImRjIiwia2V5Q29kZSIsImVjIiwiZGV0YWlsIiwiZmMiLCJpYyIsIndoaWNoIiwiZ2MiLCJjaGFyIiwiaGMiLCJqYyIsImtjIiwibGMiLCJtYyIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJuYyIsImluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQiLCJvYyIsInBjIiwicWMiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJyYyIsInNjIiwidGMiLCJ4YyIsInVjIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwidmMiLCJ3YyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInljIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiemMiLCJCYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiQWMiLCJDYyIsIkRjIiwiY2hhbmdlIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiJGMiLCJhZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJfd3JhcHBlclN0YXRlIiwiY29udHJvbGxlZCIsImdldEF0dHJpYnV0ZSIsImJkIiwidmlldyIsImNkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImRkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImVkIiwiZmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJnZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwiaGQiLCJwYXJlbnRXaW5kb3ciLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiamQiLCJrZCIsImVmZmVjdFRhZyIsImxkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIm1kIiwibmQiLCJzaWJsaW5nIiwiY3VycmVudCIsInFkIiwicmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInNkIiwidG9wTGV2ZWxUeXBlIiwidGQiLCJ1ZCIsIlUiLCJ2ZCIsImJpbmQiLCJ3ZCIsInhkIiwiX2VuYWJsZWQiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzZXRIYW5kbGVUb3BMZXZlbCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwieWQiLCJ6ZCIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkFkIiwiQmQiLCJDZCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJEZCIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTY3JvbGwiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUZXh0SW5wdXQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsInRvcFdoZWVsIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsImZpcnN0Q2hpbGQiLCJKZCIsInRleHRDb250ZW50IiwibmV4dFNpYmxpbmciLCJLZCIsIkxkIiwiTWQiLCJzZWxlY3QiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJTZCIsIm9uU2VsZWN0IiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJjaGFyQ29kZSIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJjbGlwYm9hcmREYXRhIiwiWGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiWWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImxvY2FsZSIsImRhdGFUcmFuc2ZlciIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsImRlIiwiZWUiLCJmZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJnZSIsImhlIiwiViIsIlciLCJTZXQiLCJpZSIsIlgiLCJqZSIsImtlIiwibGUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJuZSIsIm9lIiwiY3Vyc29yIiwicGUiLCJxZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiWSIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJwZW5kaW5nUHJvcHMiLCJpbnRlcm5hbENvbnRleHRUYWciLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJzZSIsInRlIiwiaXNSZWFjdENvbXBvbmVudCIsInVlIiwidmUiLCJ3ZSIsImhhbmRsZXIiLCJ4ZSIsInllIiwicGVuZGluZ0NoaWxkcmVuIiwiemUiLCJBZSIsIkJlIiwiRGUiLCJFZSIsIkZlIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJHZSIsIkhlIiwiSWUiLCJwYXJ0aWFsU3RhdGUiLCJKZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiS2UiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZWZzIiwiJGUiLCJhZiIsIk1hcCIsInUiLCJ6IiwiJCR0eXBlb2YiLCJHIiwiSSIsIkwiLCJBIiwidyIsIk4iLCJkb25lIiwiSiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDb250ZXh0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJ1c2VTeW5jU2NoZWR1bGluZyIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJ1cGRhdGVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwibmV4dENhbGxiYWNrIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJ1bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiTGUiLCJPYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJiZWdpbkZhaWxlZFdvcmsiLCJnZiIsImtmIiwiUWIiLCJqYSIsImlzUmVhZHlGb3JDb21taXQiLCJ5ZyIsInQiLCJ6ZyIsIkFnIiwiTmUiLCJPZSIsIlNjIiwiQmciLCJUYyIsIkNnIiwiRGciLCJFZyIsIlIiLCJjb21wb25lbnREaWRDYXRjaCIsImNvbXBvbmVudFN0YWNrIiwiY2EiLCJRYyIsImhhIiwicWEiLCJGZyIsIkgiLCJyZyIsIkdnIiwiVWMiLCJGIiwicmEiLCJSYyIsImViIiwicWciLCJoYXMiLCJhZGQiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImVycm9yQm91bmRhcnkiLCJlcnJvckJvdW5kYXJ5Rm91bmQiLCJlcnJvckJvdW5kYXJ5TmFtZSIsIndpbGxSZXRyeSIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJWYyIsImthIiwiSGciLCJSYiIsIklnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIk8iLCJzYSIsIkZhIiwibGEiLCJTYiIsIm1hIiwibmEiLCJXYyIsIlBlIiwiVGIiLCJKZyIsIlhjIiwiS2ciLCJmYiIsIlljIiwiVWIiLCJaYyIsImZpbmlzaGVkV29yayIsInRpbWVSZW1haW5pbmciLCJMZyIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwicmVzZXRIb3N0Q29udGFpbmVyIiwiaGYiLCJoeWRyYXRpb24iLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UiLCJwb3BIeWRyYXRpb25TdGF0ZSIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmciLCJnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCIsImh5ZHJhdGVJbnN0YW5jZSIsImh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJqZiIsIk1lIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiZWYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiZmYiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJjb21wdXRlQXN5bmNFeHBpcmF0aW9uIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImRlZmVycmVkVXBkYXRlcyIsImxmIiwib2QiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJwZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiQ2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1mIiwibmYiLCJvZiIsInFmIiwicGVyZm9ybWFuY2UiLCJyZiIsInNmIiwidGYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiQmYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsImRpZFRpbWVvdXQiLCJDZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJzZXRUaW1lb3V0IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiLCJFZiIsIkZmIiwiR2YiLCJJZiIsImlzTmFOIiwiSmYiLCJzZXRBdHRyaWJ1dGVOUyIsIktmIiwiSGYiLCJMZiIsInN0ZXAiLCJpbml0aWFsVmFsdWUiLCJpbml0aWFsQ2hlY2tlZCIsIk1mIiwiTmYiLCJPZiIsInBhcnNlRmxvYXQiLCJQZiIsIlJmIiwiUWYiLCJTZiIsImRlZmF1bHRTZWxlY3RlZCIsIlRmIiwid2FzTXVsdGlwbGUiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiY2ciLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJkZyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImVnIiwiZmciLCJ0cmltIiwic2V0UHJvcGVydHkiLCJnZyIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJjcmVhdGVFbGVtZW50TlMiLCJvZyIsImNyZWF0ZVRleHROb2RlIiwicGciLCJfX2h0bWwiLCJvbmNsaWNrIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ4ZyIsIk1nIiwiTmciLCJaIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIlBnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIk9nIiwiUWciLCJwZiIsIlJnIiwidW5tb3VudCIsIlNnIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2RlZmVycmVkVXBkYXRlcyIsIkV2ZW50UGx1Z2luSHViIiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdENvbnRyb2xsZWRDb21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJSZWFjdERPTUV2ZW50TGlzdGVuZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIlRnIiwiVWciLCJjaGVja0RDRSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJQdXJlQ29tcG9uZW50IiwidW5zdGFibGVfQXN5bmNDb21wb25lbnQiLCJGcmFnbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJfcmVhY3RSb3V0ZXJEb20iLCJBcHAiLCJOYXZMaW5rIiwiX0hvbWUyIiwiX05ld3MyIiwiX3JlYWN0RG9tMiIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFHQSxJQUFBQSxFQUFBQyxPQUFBLGlCQUNBQSxPQUFBLGlCQUNBLFNBQUFDLEVBQUFDLElBb1FBLFNBQUFELEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsS0FBQUcsRUFBQUgsR0FDQSxPQUVBLFFBQUFJLEtBREFELEVBQUFILElBQUEsRUFDQUMsRUFDQUksT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVAsRUFBQUcsS0FDQUssRUFBQUwsR0FBQUgsRUFBQUcsSUFHQSxLQUFBTSxHQUFBLElBQUFDLEdBQ0FDLElBN1FBQyxDQUFBYixFQUFBQyxHQUNBSCxLQUFBRSxFQUFBQyxJQXVEQSxJQUlBYSxFQUpBQyxHQUFBLEVBQ0FDLEVBQUEsdUJBQ0FDLEVBQUEsSUFDQUMsS0FFQUMsS0FDQUMsS0FHQSxTQUFBQyxFQUFBakIsR0FDQSxJQUFBa0IsRUFBQUMsRUFBQW5CLEdBQ0EsSUFBQWtCLEVBQUEsT0FBQUUsRUFDQSxJQUFBQyxFQUFBLFNBQUFDLEdBbUJBLE9BbEJBSixFQUFBSyxJQUFBQyxRQUNBTCxFQUFBRyxJQUNBLElBQUFILEVBQUFHLEdBQUFHLFFBQUFDLFFBQUExQixJQUNBbUIsRUFBQUcsR0FBQUcsUUFBQUUsS0FBQTNCLElBRUFlLEdBQUFmLEdBQ0FVLEVBQUFZLElBRUEsSUFBQUosRUFBQVUsU0FBQUYsUUFBQUos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SSxjQUFBLFdBQ0ltbUIsRUFBQTlkLFFBQUFySSxjQUFBLFVBQUtrbUIsR0FDTEMsRUFBQTlkLFFBQUFySSxjQUFBcXNELEVBQUE5d0MsY0FBQSxLQUNJNEssRUFBQTlkLFFBQUFySSxjQUFBLE9BQUsyZ0IsVUFBVSxhQUVYd0YsRUFBQTlkLFFBQUFySSxjQUFBLE1BQUkyZ0IsVUFBVSxPQUNWd0YsRUFBQTlkLFFBQUFySSxjQUFBLFVBQUltbUIsRUFBQTlkLFFBQUFySSxjQUFBcXNELEVBQUFFLFNBQVUxdEMsT0FBQSxFQUFNclQsR0FBRyxLQUFuQixPQUNKMmEsRUFBQTlkLFFBQUFySSxjQUFBLFVBQUltbUIsRUFBQTlkLFFBQUFySSxjQUFBcXNELEVBQUFFLFNBQVMvZ0QsR0FBRyxTQUFaLFVBR1IyYSxFQUFBOWQsUUFBQXJJLGNBQUEsT0FBSzJnQixVQUFVLGNBQ1h3RixFQUFBOWQsUUFBQXJJLGNBQUFxc0QsRUFBQXhzQyxPQUFPaEIsT0FBQSxFQUFNdlksS0FBSyxJQUFJMlosVUFBQXVzQyxFQUFBbmtELFVBQ3RCOGQsRUFBQTlkLFFBQUFySSxjQUFBcXNELEVBQUF4c0MsT0FBT2hCLE9BQUEsRUFBTXZZLEtBQUssUUFBUTJaLFVBQUF3c0MsRUFBQXBrRCx1QkFZdERxa0QsRUFBQXJrRCxRQUFTeVMsT0FDTHFMLEVBQUE5ZCxRQUFBckksY0FBQ3NzRCxFQUFELE1BQ0F6c0QsU0FBUzhzRCxlQUFlIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0O1xuIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIilcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcImNiYjczZDY4NWMxNjdlMmI0ZTZmXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpXG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSBtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHR7XG4gXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuIFx0XHR2YXIgY2I7XG4gXHRcdHZhciBpO1xuIFx0XHR2YXIgajtcbiBcdFx0dmFyIG1vZHVsZTtcbiBcdFx0dmFyIG1vZHVsZUlkO1xuXG4gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdClcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4vXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgzNikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzYpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gISgwLCBfRE9NVXRpbHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSkoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmICgoMCwgX0RPTVV0aWxzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQpKGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHVybDogJy8nLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSAnLydcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgJ0EgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudCcpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PicpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaGFzaGJhbmcnLCAnbm9zbGFzaCcsICdzbGFzaCddKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSByaWdodCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncmVwbGFjZScsICd0bycsICdpbm5lclJlZiddKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIGhyZWYgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuY3JlYXRlSHJlZih0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8geyBwYXRobmFtZTogdG8gfSA6IHRvKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgTWVtb3J5Um91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gJycgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIHBhdGggPSBfb3B0aW9ucyRwYXRoID09PSB1bmRlZmluZWQgPyAnLycgOiBfb3B0aW9ucyRwYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gJy8nICYmIHVybCA9PT0gJycgPyAnLycgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudCA/IC8vIGNvbXBvbmVudCBwcm9wIGdldHMgZmlyc3QgcHJpb3JpdHksIG9ubHkgY2FsbGVkIGlmIHRoZXJlJ3MgYSBtYXRjaFxuICAgIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGwgOiByZW5kZXIgPyAvLyByZW5kZXIgcHJvcCBpcyBuZXh0LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogY2hpbGRyZW4gPyAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihwcm9wcykgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbCA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCBMaW5rIGZyb20gJy4vTGluayc7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYuYXJpYUN1cnJlbnQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsndG8nLCAnZXhhY3QnLCAnc3RyaWN0JywgJ2xvY2F0aW9uJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdjbGFzc05hbWUnLCAnYWN0aXZlU3R5bGUnLCAnc3R5bGUnLCAnaXNBY3RpdmUnLCAnYXJpYUN1cnJlbnQnXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiAodHlwZW9mIHRvID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0bykpID09PSAnb2JqZWN0JyA/IHRvLnBhdGhuYW1lIDogdG8sXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKCcgJykgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgICdhcmlhLWN1cnJlbnQnOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFyaWFDdXJyZW50OiBQcm9wVHlwZXMub25lT2YoWydwYWdlJywgJ3N0ZXAnLCAnbG9jYXRpb24nLCAndHJ1ZSddKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScsXG4gIGFyaWFDdXJyZW50OiAndHJ1ZSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1Byb21wdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJ2hpc3RvcnknO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciB1cGRhdGluZyB0aGUgbG9jYXRpb24gcHJvZ3JhbW1hdGljYWxseVxuICogd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUmVkaXJlY3QgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVkaXJlY3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlZGlyZWN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWRpcmVjdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5pc1N0YXRpYyA9IGZ1bmN0aW9uIGlzU3RhdGljKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucm91dGVyICYmIHRoaXMuY29udGV4dC5yb3V0ZXIuc3RhdGljQ29udGV4dDtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCAnWW91IHRyaWVkIHRvIHJlZGlyZWN0IHRvIHRoZSBzYW1lIHJvdXRlIHlvdVxcJ3JlIGN1cnJlbnRseSBvbjogJyArICgnXCInICsgbmV4dFRvLnBhdGhuYW1lICsgbmV4dFRvLnNlYXJjaCArICdcIicpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHB1c2ggPSBfcHJvcHMucHVzaCxcbiAgICAgICAgdG8gPSBfcHJvcHMudG87XG5cblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9IGZyb20gJ2hpc3RvcnkvUGF0aFV0aWxzJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG52YXIgbm9ybWFsaXplTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbihvYmplY3QpIHtcbiAgdmFyIF9vYmplY3QkcGF0aG5hbWUgPSBvYmplY3QucGF0aG5hbWUsXG4gICAgICBwYXRobmFtZSA9IF9vYmplY3QkcGF0aG5hbWUgPT09IHVuZGVmaW5lZCA/ICcvJyA6IF9vYmplY3QkcGF0aG5hbWUsXG4gICAgICBfb2JqZWN0JHNlYXJjaCA9IG9iamVjdC5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfb2JqZWN0JHNlYXJjaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JHNlYXJjaCxcbiAgICAgIF9vYmplY3QkaGFzaCA9IG9iamVjdC5oYXNoLFxuICAgICAgaGFzaCA9IF9vYmplY3QkaGFzaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JGhhc2g7XG5cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgobG9jYXRpb24pIDogbm9ybWFsaXplTG9jYXRpb24obG9jYXRpb24pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgJ1lvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPicsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1BVU0gnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiYXNlbmFtZScsICdjb250ZXh0JywgJ2xvY2F0aW9uJ10pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246ICdQT1AnLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcignZ28nKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcignZ29CYWNrJyksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoJ2dvRm9yd2FyZCcpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogJycsXG4gIGxvY2F0aW9uOiAnLydcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN0YXRpY1JvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHJldHVybjtcblxuICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pIDogcm91dGUubWF0Y2g7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Td2l0Y2gnO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAncmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgWyd3cmFwcGVkQ29tcG9uZW50UmVmJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywgeyByZWY6IHdyYXBwZWRDb21wb25lbnRSZWYgfSkpO1xuICAgICAgfSB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gJ3dpdGhSb3V0ZXIoJyArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgJyknO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNsYXNzIE5ld3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgbXNnOiBcIk5ld3NcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgbXNnIH0gPSB0aGlzLnN0YXRlICAgICAgICBcclxuICAgICAgICByZXR1cm4oXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDI+eyBtc2cgfTwvaDI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5ld3MiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jbGFzcyBIb21lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgbXNnOiAnSG9tZSdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy9kb20gYWN0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgLy8gcmVtb3ZlIGRvbVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcclxuICAgICAgICAvL3Byb3Bz5ZKMc3RhdGXlj5HnlJ/lj5jljJbml7bmiafooYzvvIzlubbkuJTlnKhyZW5kZXLmlrnms5XkuYvliY3miafooYzvvIxcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeyBtc2cgfSA9IHRoaXMuc3RhdGVcclxuICAgICAgICByZXR1cm4oXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDI+e21zZ308L2gyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIb21lIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cblxuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjIuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxsPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxCPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksYmE9cmVxdWlyZShcImZianMvbGliL0V2ZW50TGlzdGVuZXJcIiksZGE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksZWE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGlhPXJlcXVpcmUoXCJmYmpzL2xpYi9mb2N1c05vZGVcIiksRD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBFKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YWE/dm9pZCAwOkUoXCIyMjdcIik7XG52YXIgb2E9e2NoaWxkcmVuOiEwLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiEwLGRlZmF1bHRWYWx1ZTohMCxkZWZhdWx0Q2hlY2tlZDohMCxpbm5lckhUTUw6ITAsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiEwLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzohMCxzdHlsZTohMH07ZnVuY3Rpb24gcGEoYSxiKXtyZXR1cm4oYSZiKT09PWJ9XG52YXIgdGE9e01VU1RfVVNFX1BST1BFUlRZOjEsSEFTX0JPT0xFQU5fVkFMVUU6NCxIQVNfTlVNRVJJQ19WQUxVRTo4LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjI0LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6MzIsSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFOjY0LGluamVjdERPTVByb3BlcnR5Q29uZmlnOmZ1bmN0aW9uKGEpe3ZhciBiPXRhLGM9YS5Qcm9wZXJ0aWVzfHx7fSxkPWEuRE9NQXR0cmlidXRlTmFtZXNwYWNlc3x8e30sZT1hLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fTthPWEuRE9NTXV0YXRpb25NZXRob2RzfHx7fTtmb3IodmFyIGYgaW4gYyl7dWEuaGFzT3duUHJvcGVydHkoZik/RShcIjQ4XCIsZik6dm9pZCAwO3ZhciBnPWYudG9Mb3dlckNhc2UoKSxoPWNbZl07Zz17YXR0cmlidXRlTmFtZTpnLGF0dHJpYnV0ZU5hbWVzcGFjZTpudWxsLHByb3BlcnR5TmFtZTpmLG11dGF0aW9uTWV0aG9kOm51bGwsbXVzdFVzZVByb3BlcnR5OnBhKGgsYi5NVVNUX1VTRV9QUk9QRVJUWSksXG5oYXNCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19CT09MRUFOX1ZBTFVFKSxoYXNOdW1lcmljVmFsdWU6cGEoaCxiLkhBU19OVU1FUklDX1ZBTFVFKSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpwYShoLGIuSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6cGEoaCxiLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLGhhc1N0cmluZ0Jvb2xlYW5WYWx1ZTpwYShoLGIuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFKX07MT49Zy5oYXNCb29sZWFuVmFsdWUrZy5oYXNOdW1lcmljVmFsdWUrZy5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlP3ZvaWQgMDpFKFwiNTBcIixmKTtlLmhhc093blByb3BlcnR5KGYpJiYoZy5hdHRyaWJ1dGVOYW1lPWVbZl0pO2QuaGFzT3duUHJvcGVydHkoZikmJihnLmF0dHJpYnV0ZU5hbWVzcGFjZT1kW2ZdKTthLmhhc093blByb3BlcnR5KGYpJiYoZy5tdXRhdGlvbk1ldGhvZD1hW2ZdKTt1YVtmXT1nfX19LHVhPXt9O1xuZnVuY3Rpb24gdmEoYSxiKXtpZihvYS5oYXNPd25Qcm9wZXJ0eShhKXx8MjxhLmxlbmd0aCYmKFwib1wiPT09YVswXXx8XCJPXCI9PT1hWzBdKSYmKFwiblwiPT09YVsxXXx8XCJOXCI9PT1hWzFdKSlyZXR1cm4hMTtpZihudWxsPT09YilyZXR1cm4hMDtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJib29sZWFuXCI6cmV0dXJuIG9hLmhhc093blByb3BlcnR5KGEpP2E9ITA6KGI9d2EoYSkpP2E9Yi5oYXNCb29sZWFuVmFsdWV8fGIuaGFzU3RyaW5nQm9vbGVhblZhbHVlfHxiLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6KGE9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSksYT1cImRhdGEtXCI9PT1hfHxcImFyaWEtXCI9PT1hKSxhO2Nhc2UgXCJ1bmRlZmluZWRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJvYmplY3RcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB3YShhKXtyZXR1cm4gdWEuaGFzT3duUHJvcGVydHkoYSk/dWFbYV06bnVsbH1cbnZhciB4YT10YSx5YT14YS5NVVNUX1VTRV9QUk9QRVJUWSxLPXhhLkhBU19CT09MRUFOX1ZBTFVFLHphPXhhLkhBU19OVU1FUklDX1ZBTFVFLEFhPXhhLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLEJhPXhhLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsQ2E9eGEuSEFTX1NUUklOR19CT09MRUFOX1ZBTFVFLERhPXtQcm9wZXJ0aWVzOnthbGxvd0Z1bGxTY3JlZW46Syxhc3luYzpLLGF1dG9Gb2N1czpLLGF1dG9QbGF5OkssY2FwdHVyZTpCYSxjaGVja2VkOnlhfEssY29sczpBYSxjb250ZW50RWRpdGFibGU6Q2EsY29udHJvbHM6SyxcImRlZmF1bHRcIjpLLGRlZmVyOkssZGlzYWJsZWQ6Syxkb3dubG9hZDpCYSxkcmFnZ2FibGU6Q2EsZm9ybU5vVmFsaWRhdGU6SyxoaWRkZW46Syxsb29wOkssbXVsdGlwbGU6eWF8SyxtdXRlZDp5YXxLLG5vVmFsaWRhdGU6SyxvcGVuOksscGxheXNJbmxpbmU6SyxyZWFkT25seTpLLHJlcXVpcmVkOksscmV2ZXJzZWQ6Syxyb3dzOkFhLHJvd1NwYW46emEsXG5zY29wZWQ6SyxzZWFtbGVzczpLLHNlbGVjdGVkOnlhfEssc2l6ZTpBYSxzdGFydDp6YSxzcGFuOkFhLHNwZWxsQ2hlY2s6Q2Esc3R5bGU6MCx0YWJJbmRleDowLGl0ZW1TY29wZTpLLGFjY2VwdENoYXJzZXQ6MCxjbGFzc05hbWU6MCxodG1sRm9yOjAsaHR0cEVxdWl2OjAsdmFsdWU6Q2F9LERPTUF0dHJpYnV0ZU5hbWVzOnthY2NlcHRDaGFyc2V0OlwiYWNjZXB0LWNoYXJzZXRcIixjbGFzc05hbWU6XCJjbGFzc1wiLGh0bWxGb3I6XCJmb3JcIixodHRwRXF1aXY6XCJodHRwLWVxdWl2XCJ9LERPTU11dGF0aW9uTWV0aG9kczp7dmFsdWU6ZnVuY3Rpb24oYSxiKXtpZihudWxsPT1iKXJldHVybiBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1wibnVtYmVyXCIhPT1hLnR5cGV8fCExPT09YS5oYXNBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9hLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitiKTphLnZhbGlkaXR5JiYhYS52YWxpZGl0eS5iYWRJbnB1dCYmYS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hJiZcbmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK2IpfX19LEVhPXhhLkhBU19TVFJJTkdfQk9PTEVBTl9WQUxVRSxNPXt4bGluazpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIix4bWw6XCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIn0sR2E9e1Byb3BlcnRpZXM6e2F1dG9SZXZlcnNlOkVhLGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6RWEscHJlc2VydmVBbHBoYTpFYX0sRE9NQXR0cmlidXRlTmFtZXM6e2F1dG9SZXZlcnNlOlwiYXV0b1JldmVyc2VcIixleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOlwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLHByZXNlcnZlQWxwaGE6XCJwcmVzZXJ2ZUFscGhhXCJ9LERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6e3hsaW5rQWN0dWF0ZTpNLnhsaW5rLHhsaW5rQXJjcm9sZTpNLnhsaW5rLHhsaW5rSHJlZjpNLnhsaW5rLHhsaW5rUm9sZTpNLnhsaW5rLHhsaW5rU2hvdzpNLnhsaW5rLHhsaW5rVGl0bGU6TS54bGluayx4bGlua1R5cGU6TS54bGluayxcbnhtbEJhc2U6TS54bWwseG1sTGFuZzpNLnhtbCx4bWxTcGFjZTpNLnhtbH19LEhhPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBJYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4LWhlaWdodCB4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZSB4bWw6YmFzZSB4bWxuczp4bGluayB4bWw6bGFuZyB4bWw6c3BhY2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoSGEsXG5JYSk7R2EuUHJvcGVydGllc1tiXT0wO0dhLkRPTUF0dHJpYnV0ZU5hbWVzW2JdPWF9KTt4YS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhEYSk7eGEuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoR2EpO1xudmFyIFA9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbmplY3Rpb246e2luamVjdEVycm9yVXRpbHM6ZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGEuaW52b2tlR3VhcmRlZENhbGxiYWNrP0UoXCIxOTdcIik6dm9pZCAwO0phPWEuaW52b2tlR3VhcmRlZENhbGxiYWNrfX0saW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtKYS5hcHBseShQLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFAuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHE9UC5jbGVhckNhdWdodEVycm9yKCk7UC5faGFzUmV0aHJvd0Vycm9yfHwoUC5faGFzUmV0aHJvd0Vycm9yPSEwLFAuX3JldGhyb3dFcnJvcj1cbnEpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEthLmFwcGx5KFAsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gUC5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihQLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9UC5fY2F1Z2h0RXJyb3I7UC5fY2F1Z2h0RXJyb3I9bnVsbDtQLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1FKFwiMTk4XCIpfX07ZnVuY3Rpb24gSmEoYSxiLGMsZCxlLGYsZyxoLGspe1AuX2hhc0NhdWdodEVycm9yPSExO1AuX2NhdWdodEVycm9yPW51bGw7dmFyIHE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMscSl9Y2F0Y2godil7UC5fY2F1Z2h0RXJyb3I9dixQLl9oYXNDYXVnaHRFcnJvcj0hMH19XG5mdW5jdGlvbiBLYSgpe2lmKFAuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9UC5fcmV0aHJvd0Vycm9yO1AuX3JldGhyb3dFcnJvcj1udWxsO1AuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIExhPW51bGwsTWE9e307XG5mdW5jdGlvbiBOYSgpe2lmKExhKWZvcih2YXIgYSBpbiBNYSl7dmFyIGI9TWFbYV0sYz1MYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkUoXCI5NlwiLGEpO2lmKCFPYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpFKFwiOTdcIixhKTtPYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO1BhLmhhc093blByb3BlcnR5KGgpP0UoXCI5OVwiLGgpOnZvaWQgMDtQYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZRYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpFKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gUWEoYSxiLGMpe1JhW2FdP0UoXCIxMDBcIixhKTp2b2lkIDA7UmFbYV09YjtTYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBPYT1bXSxQYT17fSxSYT17fSxTYT17fTtmdW5jdGlvbiBUYShhKXtMYT9FKFwiMTAxXCIpOnZvaWQgMDtMYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtOYSgpfWZ1bmN0aW9uIFVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO01hLmhhc093blByb3BlcnR5KGMpJiZNYVtjXT09PWR8fChNYVtjXT9FKFwiMTAyXCIsYyk6dm9pZCAwLE1hW2NdPWQsYj0hMCl9YiYmTmEoKX1cbnZhciBWYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOk9hLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpQYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpSYSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOlNhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOlRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpVYX0pLFdhPW51bGwsWGE9bnVsbCxZYT1udWxsO2Z1bmN0aW9uIFphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9WWEoZCk7UC5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uICRhKGEsYil7bnVsbD09Yj9FKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBhYihhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgYmI9bnVsbDtcbmZ1bmN0aW9uIGNiKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKVphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmWmEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gZGIoYSl7cmV0dXJuIGNiKGEsITApfWZ1bmN0aW9uIGdiKGEpe3JldHVybiBjYihhLCExKX12YXIgaGI9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6VGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOlVhfTtcbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9V2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIGpiKGEsYixjLGQpe2Zvcih2YXIgZSxmPTA7ZjxPYS5sZW5ndGg7ZisrKXt2YXIgZz1PYVtmXTtnJiYoZz1nLmV4dHJhY3RFdmVudHMoYSxiLGMsZCkpJiYoZT0kYShlLGcpKX1yZXR1cm4gZX1mdW5jdGlvbiBrYihhKXthJiYoYmI9JGEoYmIsYSkpfWZ1bmN0aW9uIGxiKGEpe3ZhciBiPWJiO2JiPW51bGw7YiYmKGE/YWIoYixkYik6YWIoYixnYiksYmI/RShcIjk1XCIpOnZvaWQgMCxQLnJldGhyb3dDYXVnaHRFcnJvcigpKX12YXIgbWI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOmhiLGdldExpc3RlbmVyOmliLGV4dHJhY3RFdmVudHM6amIsZW5xdWV1ZUV2ZW50czprYixwcm9jZXNzRXZlbnRRdWV1ZTpsYn0pLG5iPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIituYixvYj1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK25iO1xuZnVuY3Rpb24gcGIoYSl7aWYoYVtRXSlyZXR1cm4gYVtRXTtmb3IodmFyIGI9W107IWFbUV07KWlmKGIucHVzaChhKSxhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDt2YXIgYz12b2lkIDAsZD1hW1FdO2lmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXJldHVybiBkO2Zvcig7YSYmKGQ9YVtRXSk7YT1iLnBvcCgpKWM9ZDtyZXR1cm4gY31mdW5jdGlvbiBxYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7RShcIjMzXCIpfWZ1bmN0aW9uIHJiKGEpe3JldHVybiBhW29iXXx8bnVsbH1cbnZhciBzYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbUV09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6cGIsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbUV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpxYixnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOnJiLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW29iXT1ifX0pO2Z1bmN0aW9uIHRiKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiB1YihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPXRiKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfVxuZnVuY3Rpb24gdmIoYSxiLGMpe2lmKGI9aWIoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz0kYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz0kYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiB3YihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZ1YihhLl90YXJnZXRJbnN0LHZiLGEpfWZ1bmN0aW9uIHhiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP3RiKGIpOm51bGw7dWIoYix2YixhKX19XG5mdW5jdGlvbiB5YihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1pYihhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9JGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9JGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIHpiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmeWIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIEFiKGEpe2FiKGEsd2IpfVxuZnVuY3Rpb24gQmIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPXRiKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPXRiKGspKWgrKztmb3IoOzA8Zy1oOyllPXRiKGUpLGctLTtmb3IoOzA8aC1nOylmPXRiKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPXRiKGUpO2Y9dGIoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPXRiKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9dGIoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl5YihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOyl5YihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBDYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOkFiLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe2FiKGEseGIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6QmIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7YWIoYSx6Yil9fSksRGI9bnVsbDtmdW5jdGlvbiBFYigpeyFEYiYmbC5jYW5Vc2VET00mJihEYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBEYn12YXIgUz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIEZiKCl7aWYoUy5fZmFsbGJhY2tUZXh0KXJldHVybiBTLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1TLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9R2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO1MuX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBTLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gR2IoKXtyZXR1cm5cInZhbHVlXCJpbiBTLl9yb290P1MuX3Jvb3QudmFsdWU6Uy5fcm9vdFtFYigpXX1cbnZhciBIYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLEliPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gVChhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQihULnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPEhiLmxlbmd0aDthKyspdGhpc1tIYlthXV09bnVsbH19KTtULkludGVyZmFjZT1JYjtULmF1Z21lbnRDbGFzcz1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXt9Yy5wcm90b3R5cGU9dGhpcy5wcm90b3R5cGU7dmFyIGQ9bmV3IGM7QihkLGEucHJvdG90eXBlKTthLnByb3RvdHlwZT1kO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5JbnRlcmZhY2U9Qih7fSx0aGlzLkludGVyZmFjZSxiKTthLmF1Z21lbnRDbGFzcz10aGlzLmF1Z21lbnRDbGFzcztKYihhKX07SmIoVCk7ZnVuY3Rpb24gS2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBMYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gSmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9S2I7YS5yZWxlYXNlPUxifWZ1bmN0aW9uIE1iKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhNYix7ZGF0YTpudWxsfSk7ZnVuY3Rpb24gTmIoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKE5iLHtkYXRhOm51bGx9KTt2YXIgUGI9WzksMTMsMjcsMzJdLFZiPWwuY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxXYj1udWxsO2wuY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihXYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBYYjtcbmlmKFhiPWwuY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhV2Ipe3ZhciBZYj13aW5kb3cub3BlcmE7WGI9IShcIm9iamVjdFwiPT09dHlwZW9mIFliJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgWWIudmVyc2lvbiYmMTI+PXBhcnNlSW50KFliLnZlcnNpb24oKSwxMCkpfVxudmFyIFpiPVhiLCRiPWwuY2FuVXNlRE9NJiYoIVZifHxXYiYmODxXYiYmMTE+PVdiKSxhYz1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxiYz17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxjYz0hMTtcbmZ1bmN0aW9uIGRjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09UGIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBlYyhhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBmYz0hMTtmdW5jdGlvbiBnYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gZWMoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2NjPSEwO3JldHVybiBhYztjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1hYyYmY2M/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gaGMoYSxiKXtpZihmYylyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhVmImJmRjKGEsYik/KGE9RmIoKSxTLl9yb290PW51bGwsUy5fc3RhcnRUZXh0PW51bGwsUy5fZmFsbGJhY2tUZXh0PW51bGwsZmM9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuICRiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGljPXtldmVudFR5cGVzOmJjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoVmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvblN0YXJ0XCI6dmFyIGY9YmMuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmY9YmMuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjpmPWJjLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBmYz9kYyhhLGMpJiYoZj1iYy5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPWJjLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KCRiJiYoZmN8fGYhPT1iYy5jb21wb3NpdGlvblN0YXJ0P2Y9PT1iYy5jb21wb3NpdGlvbkVuZCYmZmMmJihlPUZiKCkpOihTLl9yb290PWQsUy5fc3RhcnRUZXh0PUdiKCksZmM9ITApKSxmPU1iLmdldFBvb2xlZChmLGIsYyxkKSxlP2YuZGF0YT1cbmU6KGU9ZWMoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLEFiKGYpLGU9Zik6ZT1udWxsOyhhPVpiP2djKGEsYyk6aGMoYSxjKSk/KGI9TmIuZ2V0UG9vbGVkKGJjLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxBYihiKSk6Yj1udWxsO3JldHVybltlLGJdfX0samM9bnVsbCxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYoYT1YYShhKSl7amMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpFKFwiMTk0XCIpO3ZhciBiPVdhKGEuc3RhdGVOb2RlKTtqYy5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIG5jPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe2pjPWF9fTtmdW5jdGlvbiBvYyhhKXtrYz9sYz9sYy5wdXNoKGEpOmxjPVthXTprYz1hfVxuZnVuY3Rpb24gcGMoKXtpZihrYyl7dmFyIGE9a2MsYj1sYztsYz1rYz1udWxsO21jKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyltYyhiW2FdKX19dmFyIHFjPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpuYyxlbnF1ZXVlU3RhdGVSZXN0b3JlOm9jLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOnBjfSk7ZnVuY3Rpb24gcmMoYSxiKXtyZXR1cm4gYShiKX12YXIgc2M9ITE7ZnVuY3Rpb24gdGMoYSxiKXtpZihzYylyZXR1cm4gcmMoYSxiKTtzYz0hMDt0cnl7cmV0dXJuIHJjKGEsYil9ZmluYWxseXtzYz0hMSxwYygpfX12YXIgdWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXVjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiB3YyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHhjO2wuY2FuVXNlRE9NJiYoeGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24mJmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUmJiEwIT09ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIlwiLFwiXCIpKTtcbmZ1bmN0aW9uIHljKGEsYil7aWYoIWwuY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2I9XCJvblwiK2E7dmFyIGM9YiBpbiBkb2N1bWVudDtjfHwoYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGMuc2V0QXR0cmlidXRlKGIsXCJyZXR1cm47XCIpLGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNbYl0pOyFjJiZ4YyYmXCJ3aGVlbFwiPT09YSYmKGM9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcIkV2ZW50cy53aGVlbFwiLFwiMy4wXCIpKTtyZXR1cm4gY31mdW5jdGlvbiB6YyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gQWMoYSl7dmFyIGI9emMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBCYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9QWMoYSkpfWZ1bmN0aW9uIENjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD16YyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBEYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtcbmZ1bmN0aW9uIEVjKGEsYixjKXthPVQuZ2V0UG9vbGVkKERjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7b2MoYyk7QWIoYSk7cmV0dXJuIGF9dmFyIEZjPW51bGwsR2M9bnVsbDtmdW5jdGlvbiBIYyhhKXtrYihhKTtsYighMSl9ZnVuY3Rpb24gSWMoYSl7dmFyIGI9cWIoYSk7aWYoQ2MoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSmMoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgS2M9ITE7bC5jYW5Vc2VET00mJihLYz15YyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBMYygpe0ZjJiYoRmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsTWMpLEdjPUZjPW51bGwpfWZ1bmN0aW9uIE1jKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZJYyhHYykmJihhPUVjKEdjLGEsd2MoYSkpLHRjKEhjLGEpKX1cbmZ1bmN0aW9uIE5jKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhMYygpLEZjPWIsR2M9YyxGYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixNYykpOlwidG9wQmx1clwiPT09YSYmTGMoKX1mdW5jdGlvbiBPYyhhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBJYyhHYyl9ZnVuY3Rpb24gUGMoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBJYyhiKX1mdW5jdGlvbiAkYyhhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBJYyhiKX1cbnZhciBhZD17ZXZlbnRUeXBlczpEYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOktjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9xYihiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUpjO2Vsc2UgaWYodmMoZSkpaWYoS2MpZz0kYztlbHNle2c9T2M7dmFyIGg9TmN9ZWxzZSBmPWUubm9kZU5hbWUsIWZ8fFwiaW5wdXRcIiE9PWYudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChnPVBjKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiBFYyhnLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmKGE9XCJcIitlLnZhbHVlLGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikhPT1cbmEmJmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIixhKSl9fTtmdW5jdGlvbiBiZChhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmQse3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pO3ZhciBjZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1jZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGVkKCl7cmV0dXJuIGRkfWZ1bmN0aW9uIGZkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhmZCx7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTplZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX19KTtcbnZhciBnZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19fSxoZD17ZXZlbnRUeXBlczpnZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/cGIoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1cbmIpcmV0dXJuIG51bGw7dmFyIGY9bnVsbD09YT9lOnFiKGEpO2U9bnVsbD09Yj9lOnFiKGIpO3ZhciBnPWZkLmdldFBvb2xlZChnZC5tb3VzZUxlYXZlLGEsYyxkKTtnLnR5cGU9XCJtb3VzZWxlYXZlXCI7Zy50YXJnZXQ9ZjtnLnJlbGF0ZWRUYXJnZXQ9ZTtjPWZkLmdldFBvb2xlZChnZC5tb3VzZUVudGVyLGIsYyxkKTtjLnR5cGU9XCJtb3VzZWVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9ZjtCYihnLGMsYSxiKTtyZXR1cm5bZyxjXX19LGlkPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyO2Z1bmN0aW9uIGpkKGEpe2E9YS50eXBlO3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuZGlzcGxheU5hbWV8fGEubmFtZTpudWxsfVxuZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2JbXCJyZXR1cm5cIl07KWI9YltcInJldHVyblwiXTtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiW1wicmV0dXJuXCJdOylpZihiPWJbXCJyZXR1cm5cIl0sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBsZChhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX1mdW5jdGlvbiBtZChhKXsyIT09a2QoYSk/RShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBuZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1rZChhKSwzPT09Yj9FKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWNbXCJyZXR1cm5cIl0sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIG1kKGUpLGE7aWYoZz09PWQpcmV0dXJuIG1kKGUpLGI7Zz1nLnNpYmxpbmd9RShcIjE4OFwiKX1pZihjW1wicmV0dXJuXCJdIT09ZFtcInJldHVyblwiXSljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpFKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/RShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0UoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gb2QoYSl7YT1uZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHBkKGEpe2E9bmQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuIG51bGw7Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgcWQ9W107XG5mdW5jdGlvbiByZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjW1wicmV0dXJuXCJdOyljPWNbXCJyZXR1cm5cIl07Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1wYihjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLHNkKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCx3YyhhLm5hdGl2ZUV2ZW50KSl9dmFyIHRkPSEwLHNkPXZvaWQgMDtmdW5jdGlvbiB1ZChhKXt0ZD0hIWF9ZnVuY3Rpb24gVShhLGIsYyl7cmV0dXJuIGM/YmEubGlzdGVuKGMsYix2ZC5iaW5kKG51bGwsYSkpOm51bGx9ZnVuY3Rpb24gd2QoYSxiLGMpe3JldHVybiBjP2JhLmNhcHR1cmUoYyxiLHZkLmJpbmQobnVsbCxhKSk6bnVsbH1cbmZ1bmN0aW9uIHZkKGEsYil7aWYodGQpe3ZhciBjPXdjKGIpO2M9cGIoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1rZChjKXx8KGM9bnVsbCk7aWYocWQubGVuZ3RoKXt2YXIgZD1xZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXt0YyhyZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnFkLmxlbmd0aCYmcWQucHVzaChhKX19fVxudmFyIHhkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiB0ZH0sZ2V0IF9oYW5kbGVUb3BMZXZlbCgpe3JldHVybiBzZH0sc2V0SGFuZGxlVG9wTGV2ZWw6ZnVuY3Rpb24oYSl7c2Q9YX0sc2V0RW5hYmxlZDp1ZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGR9LHRyYXBCdWJibGVkRXZlbnQ6VSx0cmFwQ2FwdHVyZWRFdmVudDp3ZCxkaXNwYXRjaEV2ZW50OnZkfSk7ZnVuY3Rpb24geWQoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciB6ZD17YW5pbWF0aW9uZW5kOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOnlkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6eWQoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6eWQoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxBZD17fSxCZD17fTtsLmNhblVzZURPTSYmKEJkPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIHpkLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIHpkLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIHpkLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBDZChhKXtpZihBZFthXSlyZXR1cm4gQWRbYV07aWYoIXpkW2FdKXJldHVybiBhO3ZhciBiPXpkW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEJkKXJldHVybiBBZFthXT1iW2NdO3JldHVyblwiXCJ9XG52YXIgRGQ9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BBbmltYXRpb25FbmQ6Q2QoXCJhbmltYXRpb25lbmRcIil8fFwiYW5pbWF0aW9uZW5kXCIsdG9wQW5pbWF0aW9uSXRlcmF0aW9uOkNkKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpfHxcImFuaW1hdGlvbml0ZXJhdGlvblwiLHRvcEFuaW1hdGlvblN0YXJ0OkNkKFwiYW5pbWF0aW9uc3RhcnRcIil8fFwiYW5pbWF0aW9uc3RhcnRcIix0b3BCbHVyOlwiYmx1clwiLHRvcENhbmNlbDpcImNhbmNlbFwiLHRvcENhblBsYXk6XCJjYW5wbGF5XCIsdG9wQ2FuUGxheVRocm91Z2g6XCJjYW5wbGF5dGhyb3VnaFwiLHRvcENoYW5nZTpcImNoYW5nZVwiLHRvcENsaWNrOlwiY2xpY2tcIix0b3BDbG9zZTpcImNsb3NlXCIsdG9wQ29tcG9zaXRpb25FbmQ6XCJjb21wb3NpdGlvbmVuZFwiLHRvcENvbXBvc2l0aW9uU3RhcnQ6XCJjb21wb3NpdGlvbnN0YXJ0XCIsdG9wQ29tcG9zaXRpb25VcGRhdGU6XCJjb21wb3NpdGlvbnVwZGF0ZVwiLHRvcENvbnRleHRNZW51OlwiY29udGV4dG1lbnVcIix0b3BDb3B5OlwiY29weVwiLFxudG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsdG9wRHJhZ092ZXI6XCJkcmFnb3ZlclwiLHRvcERyYWdTdGFydDpcImRyYWdzdGFydFwiLHRvcERyb3A6XCJkcm9wXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLFxudG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Nyb2xsOlwic2Nyb2xsXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGV4dElucHV0OlwidGV4dElucHV0XCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOkNkKFwidHJhbnNpdGlvbmVuZFwiKXx8XCJ0cmFuc2l0aW9uZW5kXCIsdG9wVm9sdW1lQ2hhbmdlOlwidm9sdW1lY2hhbmdlXCIsdG9wV2FpdGluZzpcIndhaXRpbmdcIix0b3BXaGVlbDpcIndoZWVsXCJ9LEVkPXt9LEZkPTAsR2Q9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIEhkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEdkKXx8KGFbR2RdPUZkKyssRWRbYVtHZF1dPXt9KTtyZXR1cm4gRWRbYVtHZF1dfWZ1bmN0aW9uIElkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpkKGEsYil7dmFyIGM9SWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SWQoYyl9fWZ1bmN0aW9uIEtkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBMZD1sLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLE1kPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sTmQ9bnVsbCxPZD1udWxsLFBkPW51bGwsUWQ9ITE7XG5mdW5jdGlvbiBSZChhLGIpe2lmKFFkfHxudWxsPT1OZHx8TmQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPU5kO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJktkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gUGQmJmVhKFBkLGMpP251bGw6KFBkPWMsYT1ULmdldFBvb2xlZChNZC5zZWxlY3QsT2QsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1OZCxBYihhKSxhKX1cbnZhciBTZD17ZXZlbnRUeXBlczpNZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1IZChlKTtmPVNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/cWIoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZih2YyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlOZD1lLE9kPWIsUGQ9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOlBkPU9kPU5kPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOlFkPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIFFkPSExLFJkKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKExkKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gUmQoYyxkKX1yZXR1cm4gbnVsbH19O2Z1bmN0aW9uIFRkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1ULmF1Z21lbnRDbGFzcyhUZCx7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7ZnVuY3Rpb24gVWQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfVQuYXVnbWVudENsYXNzKFVkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSk7ZnVuY3Rpb24gVmQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWJkLmF1Z21lbnRDbGFzcyhWZCx7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBXZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBYZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sWWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9O2Z1bmN0aW9uIFpkKGEsYixjLGQpe3JldHVybiBULmNhbGwodGhpcyxhLGIsYyxkKX1cbmJkLmF1Z21lbnRDbGFzcyhaZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1YZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1XZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/WWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmVkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9XZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP1dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSk7ZnVuY3Rpb24gJGQoYSxiLGMsZCl7cmV0dXJuIFQuY2FsbCh0aGlzLGEsYixjLGQpfWZkLmF1Z21lbnRDbGFzcygkZCx7ZGF0YVRyYW5zZmVyOm51bGx9KTtmdW5jdGlvbiBhZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9YmQuYXVnbWVudENsYXNzKGFlLHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KTtmdW5jdGlvbiBiZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9VC5hdWdtZW50Q2xhc3MoYmUse3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSk7XG5mdW5jdGlvbiBjZShhLGIsYyxkKXtyZXR1cm4gVC5jYWxsKHRoaXMsYSxiLGMsZCl9ZmQuYXVnbWVudENsYXNzKGNlLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pO3ZhciBkZT17fSxlZT17fTtcblwiYWJvcnQgYW5pbWF0aW9uRW5kIGFuaW1hdGlvbkl0ZXJhdGlvbiBhbmltYXRpb25TdGFydCBibHVyIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRvdWJsZUNsaWNrIGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgc2Nyb2xsIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b2dnbGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hNb3ZlIHRvdWNoU3RhcnQgdHJhbnNpdGlvbkVuZCB2b2x1bWVDaGFuZ2Ugd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKStcbmEuc2xpY2UoMSksYz1cIm9uXCIrYjtiPVwidG9wXCIrYjtjPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpjLGNhcHR1cmVkOmMrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbYl19O2RlW2FdPWM7ZWVbYl09Y30pO1xudmFyIGZlPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZWVbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1XZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9WmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPVZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9ZmQ7YnJlYWs7Y2FzZSBcInRvcERyYWdcIjpjYXNlIFwidG9wRHJhZ0VuZFwiOmNhc2UgXCJ0b3BEcmFnRW50ZXJcIjpjYXNlIFwidG9wRHJhZ0V4aXRcIjpjYXNlIFwidG9wRHJhZ0xlYXZlXCI6Y2FzZSBcInRvcERyYWdPdmVyXCI6Y2FzZSBcInRvcERyYWdTdGFydFwiOmNhc2UgXCJ0b3BEcm9wXCI6YT1cbiRkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9YWU7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPVRkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1iZTticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1iZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPWNlO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9VWQ7YnJlYWs7ZGVmYXVsdDphPVR9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtBYihiKTtyZXR1cm4gYn19O3NkPWZ1bmN0aW9uKGEsYixjLGQpe2E9amIoYSxiLGMsZCk7a2IoYSk7bGIoITEpfTtoYi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO1xuV2E9c2IuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtYYT1zYi5nZXRJbnN0YW5jZUZyb21Ob2RlO1lhPXNiLmdldE5vZGVGcm9tSW5zdGFuY2U7aGIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpmZSxFbnRlckxlYXZlRXZlbnRQbHVnaW46aGQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46U2QsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjppY30pO3ZhciBnZT1bXSxoZT0tMTtmdW5jdGlvbiBWKGEpezA+aGV8fChhLmN1cnJlbnQ9Z2VbaGVdLGdlW2hlXT1udWxsLGhlLS0pfWZ1bmN0aW9uIFcoYSxiKXtoZSsrO2dlW2hlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9bmV3IFNldDt2YXIgaWU9e2N1cnJlbnQ6RH0sWD17Y3VycmVudDohMX0samU9RDtmdW5jdGlvbiBrZShhKXtyZXR1cm4gbGUoYSk/amU6aWUuY3VycmVudH1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gRDt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBsZShhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gbmUoYSl7bGUoYSkmJihWKFgsYSksVihpZSxhKSl9XG5mdW5jdGlvbiBvZShhLGIsYyl7bnVsbCE9aWUuY3Vyc29yP0UoXCIxNjhcIik6dm9pZCAwO1coaWUsYixhKTtXKFgsYyxhKX1mdW5jdGlvbiBwZShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpFKFwiMTA4XCIsamQoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBCKHt9LGIsYyl9ZnVuY3Rpb24gcWUoYSl7aWYoIWxlKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8RDtqZT1pZS5jdXJyZW50O1coaWUsYixhKTtXKFgsWC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gcmUoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpFKFwiMTY5XCIpO2lmKGIpe3ZhciBkPXBlKGEsamUpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZDtWKFgsYSk7VihpZSxhKTtXKGllLGQsYSl9ZWxzZSBWKFgsYSk7VyhYLGIsYSl9XG5mdW5jdGlvbiBZKGEsYixjKXt0aGlzLnRhZz1hO3RoaXMua2V5PWI7dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpc1tcInJldHVyblwiXT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9dGhpcy5wZW5kaW5nUHJvcHM9dGhpcy5yZWY9bnVsbDt0aGlzLmludGVybmFsQ29udGV4dFRhZz1jO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiBzZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IFkoYS50YWcsYS5rZXksYS5pbnRlcm5hbENvbnRleHRUYWcpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLnBlbmRpbmdQcm9wcz1iO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gdGUoYSxiLGMpe3ZhciBkPXZvaWQgMCxlPWEudHlwZSxmPWEua2V5O1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlPyhkPWUucHJvdG90eXBlJiZlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50P25ldyBZKDIsZixiKTpuZXcgWSgwLGYsYiksZC50eXBlPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6XCJzdHJpbmdcIj09PXR5cGVvZiBlPyhkPW5ldyBZKDUsZixiKSxkLnR5cGU9ZSxkLnBlbmRpbmdQcm9wcz1hLnByb3BzKTpcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcIm51bWJlclwiPT09dHlwZW9mIGUudGFnPyhkPWUsZC5wZW5kaW5nUHJvcHM9YS5wcm9wcyk6RShcIjEzMFwiLG51bGw9PWU/ZTp0eXBlb2YgZSxcIlwiKTtkLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGR9ZnVuY3Rpb24gdWUoYSxiLGMsZCl7Yj1uZXcgWSgxMCxkLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifVxuZnVuY3Rpb24gdmUoYSxiLGMpe2I9bmV3IFkoNixudWxsLGIpO2IucGVuZGluZ1Byb3BzPWE7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHdlKGEsYixjKXtiPW5ldyBZKDcsYS5rZXksYik7Yi50eXBlPWEuaGFuZGxlcjtiLnBlbmRpbmdQcm9wcz1hO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiB4ZShhLGIsYyl7YT1uZXcgWSg5LG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHllKGEsYixjKXtiPW5ldyBZKDQsYS5rZXksYik7Yi5wZW5kaW5nUHJvcHM9YS5jaGlsZHJlbnx8W107Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBDZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTt6ZT1CZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7QWU9QmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBEZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgemUmJnplKGEpfWZ1bmN0aW9uIEVlKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBZSYmQWUoYSl9XG5mdW5jdGlvbiBGZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExfX1mdW5jdGlvbiBHZShhLGIpe251bGw9PT1hLmxhc3Q/YS5maXJzdD1hLmxhc3Q9YjooYS5sYXN0Lm5leHQ9YixhLmxhc3Q9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+Yi5leHBpcmF0aW9uVGltZSlhLmV4cGlyYXRpb25UaW1lPWIuZXhwaXJhdGlvblRpbWV9XG5mdW5jdGlvbiBIZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1GZShudWxsKSk7bnVsbCE9PWM/KGE9Yy51cGRhdGVRdWV1ZSxudWxsPT09YSYmKGE9Yy51cGRhdGVRdWV1ZT1GZShudWxsKSkpOmE9bnVsbDthPWEhPT1kP2E6bnVsbDtudWxsPT09YT9HZShkLGIpOm51bGw9PT1kLmxhc3R8fG51bGw9PT1hLmxhc3Q/KEdlKGQsYiksR2UoYSxiKSk6KEdlKGQsYiksYS5sYXN0PWIpfWZ1bmN0aW9uIEllKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gSmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMX0pO2MuZXhwaXJhdGlvblRpbWU9MDtjLmlzSW5pdGlhbGl6ZWQ/YT1jLmJhc2VTdGF0ZTooYT1jLmJhc2VTdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5pc0luaXRpYWxpemVkPSEwKTtmb3IodmFyIGc9ITAsaD1jLmZpcnN0LGs9ITE7bnVsbCE9PWg7KXt2YXIgcT1oLmV4cGlyYXRpb25UaW1lO2lmKHE+Zil7dmFyIHY9Yy5leHBpcmF0aW9uVGltZTtpZigwPT09dnx8dj5xKWMuZXhwaXJhdGlvblRpbWU9cTtrfHwoaz0hMCxjLmJhc2VTdGF0ZT1hKX1lbHNle2t8fChjLmZpcnN0PWgubmV4dCxudWxsPT09XG5jLmZpcnN0JiYoYy5sYXN0PW51bGwpKTtpZihoLmlzUmVwbGFjZSlhPUllKGgsZCxhLGUpLGc9ITA7ZWxzZSBpZihxPUllKGgsZCxhLGUpKWE9Zz9CKHt9LGEscSk6QihhLHEpLGc9ITE7aC5pc0ZvcmNlZCYmKGMuaGFzRm9yY2VVcGRhdGU9ITApO251bGwhPT1oLmNhbGxiYWNrJiYocT1jLmNhbGxiYWNrTGlzdCxudWxsPT09cSYmKHE9Yy5jYWxsYmFja0xpc3Q9W10pLHEucHVzaChoKSl9aD1oLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8KGIudXBkYXRlUXVldWU9bnVsbCk7a3x8KGMuYmFzZVN0YXRlPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTGlzdDtpZihudWxsIT09Yylmb3IoYS5jYWxsYmFja0xpc3Q9bnVsbCxhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV0sZT1kLmNhbGxiYWNrO2QuY2FsbGJhY2s9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZT9FKFwiMTkxXCIsZSk6dm9pZCAwO2UuY2FsbChiKX19XG5mdW5jdGlvbiBMZShhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYil7Yi51cGRhdGVyPWY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX12YXIgZj17aXNNb3VudGVkOmxkLGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihjLGQsZSl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZz1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmcscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGcpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGMsZCxlKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBnPWIoYyk7SGUoYyx7ZXhwaXJhdGlvblRpbWU6ZyxwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMCxpc0ZvcmNlZDohMSxuZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtcbmEoYyxnKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGMsZCl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1iKGMpO0hlKGMse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsbmV4dENhbGxiYWNrOm51bGwsbmV4dDpudWxsfSk7YShjLGUpfX07cmV0dXJue2Fkb3B0Q2xhc3NJbnN0YW5jZTplLGNvbnN0cnVjdENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1rZShhKSxmPTI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlcyxnPWY/bWUoYSxkKTpEO2I9bmV3IGMoYixnKTtlKGEsYik7ZiYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1nKTtyZXR1cm4gYn0sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuc3RhdGVOb2RlLGU9ZC5zdGF0ZXx8bnVsbCxnPWEucGVuZGluZ1Byb3BzO2c/dm9pZCAwOkUoXCIxNThcIik7dmFyIGg9a2UoYSk7ZC5wcm9wcz1nO2Quc3RhdGU9YS5tZW1vaXplZFN0YXRlPWU7ZC5yZWZzPUQ7ZC5jb250ZXh0PW1lKGEsaCk7bnVsbCE9YS50eXBlJiZudWxsIT1hLnR5cGUucHJvdG90eXBlJiYhMD09PWEudHlwZS5wcm90b3R5cGUudW5zdGFibGVfaXNBc3luY1JlYWN0Q29tcG9uZW50JiYoYS5pbnRlcm5hbENvbnRleHRUYWd8PTEpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmKGU9ZC5zdGF0ZSxkLmNvbXBvbmVudFdpbGxNb3VudCgpLGUhPT1kLnN0YXRlJiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGU9YS51cGRhdGVRdWV1ZSxudWxsIT09ZSYmKGQuc3RhdGU9SmUoYyxhLGUsZCxnLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KX0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsZSl7dmFyIGc9Yi5zdGF0ZU5vZGU7Zy5wcm9wcz1iLm1lbW9pemVkUHJvcHM7Zy5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHM7a3x8KGs9aCxudWxsPT1rP0UoXCIxNTlcIik6dm9pZCAwKTt2YXIgdT1nLmNvbnRleHQsej1rZShiKTt6PW1lKGIseik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8aD09PWsmJnU9PT16fHwodT1nLnN0YXRlLGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhrLHopLGcuc3RhdGUhPT11JiZmLmVucXVldWVSZXBsYWNlU3RhdGUoZyxnLnN0YXRlLG51bGwpKTt1PWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP0plKGEsYixiLnVwZGF0ZVF1ZXVlLGcsayxlKTp1O2lmKCEoaCE9PWt8fHUhPT1lfHxYLmN1cnJlbnR8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSwhMTt2YXIgRz1rO2lmKG51bGw9PT1ofHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSlHPSEwO2Vsc2V7dmFyIEk9Yi5zdGF0ZU5vZGUsTD1iLnR5cGU7Rz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgSS5zaG91bGRDb21wb25lbnRVcGRhdGU/SS5zaG91bGRDb21wb25lbnRVcGRhdGUoRyxlLHopOkwucHJvdG90eXBlJiZMLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoaCxHKXx8IWVhKHUsZSk6ITB9Rz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGssZSx6KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxjKGIsayksZChiLGUpKTtnLnByb3BzPWs7Zy5zdGF0ZT1lO2cuY29udGV4dD16O3JldHVybiBHfX19dmFyIFFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxSZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFNlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQsVGU9UWU/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LFVlPVFlP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixWZT1RZT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxXZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBYZShhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9V2UmJmFbV2VdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIFllPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBaZShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGwhPT1jJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl7aWYoYi5fb3duZXIpe2I9Yi5fb3duZXI7dmFyIGQ9dm9pZCAwO2ImJigyIT09Yi50YWc/RShcIjExMFwiKTp2b2lkIDAsZD1iLnN0YXRlTm9kZSk7ZD92b2lkIDA6RShcIjE0N1wiLGMpO3ZhciBlPVwiXCIrYztpZihudWxsIT09YSYmbnVsbCE9PWEucmVmJiZhLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYS5yZWY7YT1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1EP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTthLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYX1cInN0cmluZ1wiIT09dHlwZW9mIGM/RShcIjE0OFwiKTp2b2lkIDA7Yi5fb3duZXI/dm9pZCAwOkUoXCIxNDlcIixjKX1yZXR1cm4gY31cbmZ1bmN0aW9uICRlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZFKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBhZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXNlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dmUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9WmUoYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPXRlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCk7ZC5yZWY9WmUoYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gcShhLGIsYyxkKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXdlKGMsYS5pbnRlcm5hbENvbnRleHRUYWcsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtcbmJbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB2KGEsYixjLGQpe2lmKG51bGw9PT1ifHw5IT09Yi50YWcpcmV0dXJuIGI9eGUoYyxhLmludGVybmFsQ29udGV4dFRhZyxkKSxiLnR5cGU9Yy52YWx1ZSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixudWxsLGQpO2IudHlwZT1jLnZhbHVlO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB5KGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj15ZShjLGEuaW50ZXJuYWxDb250ZXh0VGFnLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2JbXCJyZXR1cm5cIl09YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9dWUoYyxhLmludGVybmFsQ29udGV4dFRhZyxcbmQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dmUoXCJcIitiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpLGJbXCJyZXR1cm5cIl09YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFJlOmlmKGIudHlwZT09PVZlKXJldHVybiBiPXVlKGIucHJvcHMuY2hpbGRyZW4sYS5pbnRlcm5hbENvbnRleHRUYWcsYyxiLmtleSksYltcInJldHVyblwiXT1hLGI7Yz10ZShiLGEuaW50ZXJuYWxDb250ZXh0VGFnLGMpO2MucmVmPVplKG51bGwsYik7Y1tcInJldHVyblwiXT1hO3JldHVybiBjO2Nhc2UgU2U6cmV0dXJuIGI9d2UoYixhLmludGVybmFsQ29udGV4dFRhZyxjKSxiW1wicmV0dXJuXCJdPWEsYjtjYXNlIFRlOnJldHVybiBjPXhlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsXG5jKSxjLnR5cGU9Yi52YWx1ZSxjW1wicmV0dXJuXCJdPWEsYztjYXNlIFVlOnJldHVybiBiPXllKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyksYltcInJldHVyblwiXT1hLGJ9aWYoWWUoYil8fFhlKGIpKXJldHVybiBiPXVlKGIsYS5pbnRlcm5hbENvbnRleHRUYWcsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjskZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIEcoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgUmU6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1WZT91KGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgU2U6cmV0dXJuIGMua2V5PT09ZT9xKGEsYixjLGQpOm51bGw7Y2FzZSBUZTpyZXR1cm4gbnVsbD09PVxuZT92KGEsYixjLGQpOm51bGw7Y2FzZSBVZTpyZXR1cm4gYy5rZXk9PT1lP3koYSxiLGMsZCk6bnVsbH1pZihZZShjKXx8WGUoYykpcmV0dXJuIG51bGwhPT1lP251bGw6dShhLGIsYyxkLG51bGwpOyRlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBSZTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09VmU/dShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgU2U6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHEoYixhLGQsZSk7Y2FzZSBUZTpyZXR1cm4gYT1hLmdldChjKXx8bnVsbCx2KGIsYSxkLGUpO2Nhc2UgVWU6cmV0dXJuIGE9XG5hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwseShiLGEsZCxlKX1pZihZZShkKXx8WGUoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsdShiLGEsZCxlLG51bGwpOyRlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTChlLGcsbSxBKXtmb3IodmFyIGg9bnVsbCxyPW51bGwsbj1nLHc9Zz0wLGs9bnVsbDtudWxsIT09biYmdzxtLmxlbmd0aDt3Kyspe24uaW5kZXg+dz8oaz1uLG49bnVsbCk6az1uLnNpYmxpbmc7dmFyIHg9RyhlLG4sbVt3XSxBKTtpZihudWxsPT09eCl7bnVsbD09PW4mJihuPWspO2JyZWFrfWEmJm4mJm51bGw9PT14LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih4LGcsdyk7bnVsbD09PXI/aD14OnIuc2libGluZz14O3I9eDtuPWt9aWYodz09PW0ubGVuZ3RoKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDt3PG0ubGVuZ3RoO3crKylpZihuPXooZSxtW3ddLEEpKWc9ZihuLGcsdyksbnVsbD09PXI/aD1uOnIuc2libGluZz1uLHI9bjtyZXR1cm4gaH1mb3Iobj1cbmQoZSxuKTt3PG0ubGVuZ3RoO3crKylpZihrPUkobixlLHcsbVt3XSxBKSl7aWYoYSYmbnVsbCE9PWsuYWx0ZXJuYXRlKW5bXCJkZWxldGVcIl0obnVsbD09PWsua2V5P3c6ay5rZXkpO2c9ZihrLGcsdyk7bnVsbD09PXI/aD1rOnIuc2libGluZz1rO3I9a31hJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBofWZ1bmN0aW9uIE4oZSxnLG0sQSl7dmFyIGg9WGUobSk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGg/RShcIjE1MFwiKTp2b2lkIDA7bT1oLmNhbGwobSk7bnVsbD09bT9FKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHI9aD1udWxsLG49Zyx3PWc9MCxrPW51bGwseD1tLm5leHQoKTtudWxsIT09biYmIXguZG9uZTt3KysseD1tLm5leHQoKSl7bi5pbmRleD53PyhrPW4sbj1udWxsKTprPW4uc2libGluZzt2YXIgSj1HKGUsbix4LnZhbHVlLEEpO2lmKG51bGw9PT1KKXtufHwobj1rKTticmVha31hJiZuJiZudWxsPT09Si5hbHRlcm5hdGUmJmIoZSxuKTtnPWYoSixcbmcsdyk7bnVsbD09PXI/aD1KOnIuc2libGluZz1KO3I9SjtuPWt9aWYoeC5kb25lKXJldHVybiBjKGUsbiksaDtpZihudWxsPT09bil7Zm9yKDsheC5kb25lO3crKyx4PW0ubmV4dCgpKXg9eihlLHgudmFsdWUsQSksbnVsbCE9PXgmJihnPWYoeCxnLHcpLG51bGw9PT1yP2g9eDpyLnNpYmxpbmc9eCxyPXgpO3JldHVybiBofWZvcihuPWQoZSxuKTsheC5kb25lO3crKyx4PW0ubmV4dCgpKWlmKHg9SShuLGUsdyx4LnZhbHVlLEEpLG51bGwhPT14KXtpZihhJiZudWxsIT09eC5hbHRlcm5hdGUpbltcImRlbGV0ZVwiXShudWxsPT09eC5rZXk/dzp4LmtleSk7Zz1mKHgsZyx3KTtudWxsPT09cj9oPXg6ci5zaWJsaW5nPXg7cj14fWEmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGh9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVZlJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO1xudmFyIG09XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihtKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFJlOmE6e3ZhciByPWYua2V5O2ZvcihtPWQ7bnVsbCE9PW07KXtpZihtLmtleT09PXIpaWYoMTA9PT1tLnRhZz9mLnR5cGU9PT1WZTptLnR5cGU9PT1mLnR5cGUpe2MoYSxtLnNpYmxpbmcpO2Q9ZShtLGYudHlwZT09PVZlP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1aZShtLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxtKTticmVha31lbHNlIGIoYSxtKTttPW0uc2libGluZ31mLnR5cGU9PT1WZT8oZD11ZShmLnByb3BzLmNoaWxkcmVuLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihoPXRlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCksaC5yZWY9WmUoZCxmKSxoW1wicmV0dXJuXCJdPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFNlOmE6e2ZvcihtPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1cbm0paWYoNz09PWQudGFnKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLGgpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXdlKGYsYS5pbnRlcm5hbENvbnRleHRUYWcsaCk7ZFtcInJldHVyblwiXT1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIFRlOmE6e2lmKG51bGwhPT1kKWlmKDk9PT1kLnRhZyl7YyhhLGQuc2libGluZyk7ZD1lKGQsbnVsbCxoKTtkLnR5cGU9Zi52YWx1ZTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZSBjKGEsZCk7ZD14ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2QudHlwZT1mLnZhbHVlO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBVZTphOntmb3IobT1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09bSlpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09XG5mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD15ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCkpOihjKGEsZCksZD12ZShmLGEuaW50ZXJuYWxDb250ZXh0VGFnLGgpKSxkW1wicmV0dXJuXCJdPWEsYT1kLGcoYSk7aWYoWWUoZikpcmV0dXJuIEwoYSxkLGYsaCk7aWYoWGUoZikpcmV0dXJuIE4oYSxkLGYsaCk7bSYmJGUoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmg9YS50eXBlLEUoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxcbmgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGJmPWFmKCEwKSxjZj1hZighMSk7XG5mdW5jdGlvbiBkZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsYyxkKTpiZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnKGEsYil7dmFyIGM9Yi5yZWY7bnVsbD09PWN8fGEmJmEucmVmPT09Y3x8KGIuZWZmZWN0VGFnfD0xMjgpfWZ1bmN0aW9uIGgoYSxiLGMsZCl7ZyhhLGIpO2lmKCFjKXJldHVybiBkJiZyZShiLCExKSxxKGEsYik7Yz1iLnN0YXRlTm9kZTtpZC5jdXJyZW50PWI7dmFyIGU9Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmKGEsYixlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZyZShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBrKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/b2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmb2UoYSxcbmIuY29udGV4dCwhMSk7SShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24gcShhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9FKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXNlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9c2UoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gdihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmsoYik7YnJlYWs7Y2FzZSAyOnFlKGIpO2JyZWFrO2Nhc2UgNDpJKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyl9cmV0dXJuIG51bGx9dmFyIHk9YS5zaG91bGRTZXRUZXh0Q29udGVudCx1PWEudXNlU3luY1NjaGVkdWxpbmcsej1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUsXG5HPWIucHVzaEhvc3RDb250ZXh0LEk9Yi5wdXNoSG9zdENvbnRhaW5lcixMPWMuZW50ZXJIeWRyYXRpb25TdGF0ZSxOPWMucmVzZXRIeWRyYXRpb25TdGF0ZSxKPWMudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7YT1MZShkLGUsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciB3PWEuYWRvcHRDbGFzc0luc3RhbmNlLG09YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLEE9YS5tb3VudENsYXNzSW5zdGFuY2UsT2I9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9FKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxyPWtlKGIpO3I9bWUoYixyKTtkPWQoZSxyKTtiLmVmZmVjdFRhZ3w9XG4xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlcj8oYi50YWc9MixlPXFlKGIpLHcoYixkKSxBKGIsYyksYj1oKGEsYiwhMCxlKSk6KGIudGFnPTEsZihhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE6YTp7ZT1iLnR5cGU7Yz1iLnBlbmRpbmdQcm9wcztkPWIubWVtb2l6ZWRQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWMmJihjPWQpO2Vsc2UgaWYobnVsbD09PWN8fGQ9PT1jKXtiPXEoYSxiKTticmVhayBhfWQ9a2UoYik7ZD1tZShiLGQpO2U9ZShjLGQpO2IuZWZmZWN0VGFnfD0xO2YoYSxiLGUpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDI6cmV0dXJuIGU9cWUoYiksZD12b2lkIDAsbnVsbD09PWE/Yi5zdGF0ZU5vZGU/RShcIjE1M1wiKToobShiLGIucGVuZGluZ1Byb3BzKSxBKGIsYyksZD0hMCk6ZD1PYihhLGIsYyksaChhLGIsZCxlKTtjYXNlIDM6cmV0dXJuIGsoYiksXG5lPWIudXBkYXRlUXVldWUsbnVsbCE9PWU/KGQ9Yi5tZW1vaXplZFN0YXRlLGU9SmUoYSxiLGUsbnVsbCxudWxsLGMpLGQ9PT1lPyhOKCksYj1xKGEsYikpOihkPWUuZWxlbWVudCxyPWIuc3RhdGVOb2RlLChudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZyLmh5ZHJhdGUmJkwoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9Y2YoYixudWxsLGQsYykpOihOKCksZihhLGIsZCkpLGIubWVtb2l6ZWRTdGF0ZT1lLGI9Yi5jaGlsZCkpOihOKCksYj1xKGEsYikpLGI7Y2FzZSA1OkcoYik7bnVsbD09PWEmJkooYik7ZT1iLnR5cGU7dmFyIG49Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7bnVsbD09PWQmJihkPW4sbnVsbD09PWQ/RShcIjE1NFwiKTp2b2lkIDApO3I9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7WC5jdXJyZW50fHxudWxsIT09ZCYmbiE9PWQ/KG49ZC5jaGlsZHJlbix5KGUsZCk/bj1udWxsOnImJnkoZSxyKSYmKGIuZWZmZWN0VGFnfD0xNiksZyhhLGIpLFxuMjE0NzQ4MzY0NyE9PWMmJiF1JiZ6KGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9MjE0NzQ4MzY0NyxiPW51bGwpOihmKGEsYixuKSxiLm1lbW9pemVkUHJvcHM9ZCxiPWIuY2hpbGQpKTpiPXEoYSxiKTtyZXR1cm4gYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZKKGIpLGE9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWEmJihhPWIubWVtb2l6ZWRQcm9wcyksYi5tZW1vaXplZFByb3BzPWEsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6ZT1iLnBlbmRpbmdQcm9wcztpZihYLmN1cnJlbnQpbnVsbD09PWUmJihlPWEmJmEubWVtb2l6ZWRQcm9wcyxudWxsPT09ZT9FKFwiMTU0XCIpOnZvaWQgMCk7ZWxzZSBpZihudWxsPT09ZXx8Yi5tZW1vaXplZFByb3BzPT09ZSllPWIubWVtb2l6ZWRQcm9wcztkPWUuY2hpbGRyZW47Yi5zdGF0ZU5vZGU9bnVsbD09PWE/Y2YoYixiLnN0YXRlTm9kZSxkLGMpOmJmKGIsYi5zdGF0ZU5vZGUsZCxjKTtiLm1lbW9pemVkUHJvcHM9ZTtyZXR1cm4gYi5zdGF0ZU5vZGU7XG5jYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OmE6e0koYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtlPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09ZSYmKGU9YSYmYS5tZW1vaXplZFByb3BzLG51bGw9PWU/RShcIjE1NFwiKTp2b2lkIDApO2Vsc2UgaWYobnVsbD09PWV8fGIubWVtb2l6ZWRQcm9wcz09PWUpe2I9cShhLGIpO2JyZWFrIGF9bnVsbD09PWE/Yi5jaGlsZD1iZihiLG51bGwsZSxjKTpmKGEsYixlKTtiLm1lbW9pemVkUHJvcHM9ZTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSAxMDphOntjPWIucGVuZGluZ1Byb3BzO2lmKFguY3VycmVudCludWxsPT09YyYmKGM9Yi5tZW1vaXplZFByb3BzKTtlbHNlIGlmKG51bGw9PT1jfHxiLm1lbW9pemVkUHJvcHM9PT1jKXtiPXEoYSxiKTticmVhayBhfWYoYSxiLGMpO2IubWVtb2l6ZWRQcm9wcz1jO2I9Yi5jaGlsZH1yZXR1cm4gYjtkZWZhdWx0OkUoXCIxNTZcIil9fSxiZWdpbkZhaWxlZFdvcms6ZnVuY3Rpb24oYSxiLFxuYyl7c3dpdGNoKGIudGFnKXtjYXNlIDI6cWUoYik7YnJlYWs7Y2FzZSAzOmsoYik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfWIuZWZmZWN0VGFnfD02NDtudWxsPT09YT9iLmNoaWxkPW51bGw6Yi5jaGlsZCE9PWEuY2hpbGQmJihiLmNoaWxkPWEuY2hpbGQpO2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpcmV0dXJuIHYoYSxiKTtiLmZpcnN0RWZmZWN0PW51bGw7Yi5sYXN0RWZmZWN0PW51bGw7Yi5jaGlsZD1udWxsPT09YT9jZihiLG51bGwsbnVsbCxjKTpiZihiLGEuY2hpbGQsbnVsbCxjKTsyPT09Yi50YWcmJihhPWIuc3RhdGVOb2RlLGIubWVtb2l6ZWRQcm9wcz1hLnByb3BzLGIubWVtb2l6ZWRTdGF0ZT1hLnN0YXRlKTtyZXR1cm4gYi5jaGlsZH19fVxuZnVuY3Rpb24gZWYoYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGU9YS5jcmVhdGVJbnN0YW5jZSxmPWEuY3JlYXRlVGV4dEluc3RhbmNlLGc9YS5hcHBlbmRJbml0aWFsQ2hpbGQsaD1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGs9YS5wcmVwYXJlVXBkYXRlLHE9YS5wZXJzaXN0ZW5jZSx2PWIuZ2V0Um9vdEhvc3RDb250YWluZXIseT1iLnBvcEhvc3RDb250ZXh0LHU9Yi5nZXRIb3N0Q29udGV4dCx6PWIucG9wSG9zdENvbnRhaW5lcixHPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSxJPWMucHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UsTD1jLnBvcEh5ZHJhdGlvblN0YXRlLE49dm9pZCAwLEo9dm9pZCAwLHc9dm9pZCAwO2EubXV0YXRpb24/KE49ZnVuY3Rpb24oKXt9LEo9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZkKGIpfSx3PWZ1bmN0aW9uKGEsYixjLGUpe2MhPT1lJiZkKGIpfSk6cT9FKFwiMjM1XCIpOkUoXCIyMzZcIik7XG5yZXR1cm57Y29tcGxldGVXb3JrOmZ1bmN0aW9uKGEsYixjKXt2YXIgbT1iLnBlbmRpbmdQcm9wcztpZihudWxsPT09bSltPWIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDIxNDc0ODM2NDchPT1iLmV4cGlyYXRpb25UaW1lfHwyMTQ3NDgzNjQ3PT09YyliLnBlbmRpbmdQcm9wcz1udWxsO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbmUoYiksbnVsbDtjYXNlIDM6eihiKTtWKFgsYik7VihpZSxiKTttPWIuc3RhdGVOb2RlO20ucGVuZGluZ0NvbnRleHQmJihtLmNvbnRleHQ9bS5wZW5kaW5nQ29udGV4dCxtLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClMKGIpLGIuZWZmZWN0VGFnJj0tMztOKGIpO3JldHVybiBudWxsO2Nhc2UgNTp5KGIpO2M9digpO3ZhciBBPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxxPWIuc3RhdGVOb2RlLHg9dSgpO3E9XG5rKHEsQSxwLG0sYyx4KTtKKGEsYixxLEEscCxtLGMpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFtKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RShcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXUoKTtpZihMKGIpKUcoYixjLGEpJiZkKGIpO2Vsc2V7YT1lKEEsbSxjLGEsYik7YTpmb3IocD1iLmNoaWxkO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWcpZyhhLHAuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1wLnRhZyYmbnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9aWYocD09PWIpYnJlYWs7Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfWgoYSxBLG0sYykmJmQoYik7Yi5zdGF0ZU5vZGU9YX1udWxsIT09Yi5yZWYmJlxuKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl3KGEsYixhLm1lbW9pemVkUHJvcHMsbSk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIG0pcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9FKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9digpO2M9dSgpO0woYik/SShiKSYmZChiKTpiLnN0YXRlTm9kZT1mKG0sYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzoobT1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpFKFwiMTY1XCIpO2IudGFnPTg7QT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1wOyl7aWYoNT09PXAudGFnfHw2PT09cC50YWd8fDQ9PT1wLnRhZylFKFwiMjQ3XCIpO2Vsc2UgaWYoOT09PXAudGFnKUEucHVzaChwLnR5cGUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PVxucFtcInJldHVyblwiXXx8cFtcInJldHVyblwiXT09PWIpYnJlYWsgYTtwPXBbXCJyZXR1cm5cIl19cC5zaWJsaW5nW1wicmV0dXJuXCJdPXBbXCJyZXR1cm5cIl07cD1wLnNpYmxpbmd9cD1tLmhhbmRsZXI7bT1wKG0ucHJvcHMsQSk7Yi5jaGlsZD1iZihiLG51bGwhPT1hP2EuY2hpbGQ6bnVsbCxtLGMpO3JldHVybiBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gYi50YWc9NyxudWxsO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4geihiKSxOKGIpLG51bGw7Y2FzZSAwOkUoXCIxNjdcIik7ZGVmYXVsdDpFKFwiMTU2XCIpfX19fVxuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKXRyeXtjKG51bGwpfWNhdGNoKEEpe2IoYSxBKX19ZnVuY3Rpb24gZChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAyOmMoYSk7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2QucHJvcHM9YS5tZW1vaXplZFByb3BzLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChBKXtiKGEsQSl9YnJlYWs7Y2FzZSA1OmMoYSk7YnJlYWs7Y2FzZSA3OmUoYS5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgNDprJiZnKGEpfX1mdW5jdGlvbiBlKGEpe2Zvcih2YXIgYj1hOzspaWYoZChiKSxudWxsPT09Yi5jaGlsZHx8ayYmND09PWIudGFnKXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8XG5iW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfWVsc2UgYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZH1mdW5jdGlvbiBmKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWEsYz0hMSxmPXZvaWQgMCxnPXZvaWQgMDs7KXtpZighYyl7Yz1iW1wicmV0dXJuXCJdO2E6Zm9yKDs7KXtudWxsPT09Yz9FKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpmPWMuc3RhdGVOb2RlO2c9ITE7YnJlYWsgYTtjYXNlIDM6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyllKGIpLGc/SihmLGIuc3RhdGVOb2RlKTpOKGYsYi5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0PT09Yi50YWc/Zj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOmQoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGRbXCJyZXR1cm5cIl09YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl07ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXZhciBoPWEuZ2V0UHVibGljSW5zdGFuY2Usaz1hLm11dGF0aW9uO2E9YS5wZXJzaXN0ZW5jZTtrfHwoYT9FKFwiMjM1XCIpOkUoXCIyMzZcIikpO3ZhciBxPWsuY29tbWl0TW91bnQsdj1rLmNvbW1pdFVwZGF0ZSx5PWsucmVzZXRUZXh0Q29udGVudCx1PWsuY29tbWl0VGV4dFVwZGF0ZSx6PWsuYXBwZW5kQ2hpbGQsRz1rLmFwcGVuZENoaWxkVG9Db250YWluZXIsST1rLmluc2VydEJlZm9yZSxMPWsuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsXG5OPWsucmVtb3ZlQ2hpbGQsSj1rLnJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjtyZXR1cm57Y29tbWl0UmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXt5KGEuc3RhdGVOb2RlKX0sY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoZihiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1FKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RShcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHkoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGYoY1tcInJldHVyblwiXSkpe2M9XG5udWxsO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWMuc2libGluZ1tcInJldHVyblwiXT1jW1wicmV0dXJuXCJdO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0woYixlLnN0YXRlTm9kZSxjKTpJKGIsZS5zdGF0ZU5vZGUsYyk6ZD9HKGIsZS5zdGF0ZU5vZGUpOnooYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09XG5hKXJldHVybjtlPWVbXCJyZXR1cm5cIl19ZS5zaWJsaW5nW1wicmV0dXJuXCJdPWVbXCJyZXR1cm5cIl07ZT1lLnNpYmxpbmd9fSxjb21taXREZWxldGlvbjpmdW5jdGlvbihhKXtnKGEpO2FbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZ2KGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0UoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO3UoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxuYyxjKTticmVhaztjYXNlIDM6YnJlYWs7ZGVmYXVsdDpFKFwiMTYzXCIpfX0sY29tbWl0TGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBjPWIuc3RhdGVOb2RlO2lmKGIuZWZmZWN0VGFnJjQpaWYobnVsbD09PWEpYy5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9YS5tZW1vaXplZFByb3BzO2E9YS5tZW1vaXplZFN0YXRlO2MucHJvcHM9Yi5tZW1vaXplZFByb3BzO2Muc3RhdGU9Yi5tZW1vaXplZFN0YXRlO2MuY29tcG9uZW50RGlkVXBkYXRlKGQsYSl9Yj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZLZShiLGMpO2JyZWFrO2Nhc2UgMzpjPWIudXBkYXRlUXVldWU7bnVsbCE9PWMmJktlKGMsbnVsbCE9PWIuY2hpbGQ/Yi5jaGlsZC5zdGF0ZU5vZGU6bnVsbCk7YnJlYWs7Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7bnVsbD09PWEmJmIuZWZmZWN0VGFnJjQmJnEoYyxcbmIudHlwZSxiLm1lbW9pemVkUHJvcHMsYik7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkUoXCIxNjNcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmIoaChjKSk7YnJlYWs7ZGVmYXVsdDpiKGMpfX19LGNvbW1pdERldGFjaFJlZjpmdW5jdGlvbihhKXthPWEucmVmO251bGwhPT1hJiZhKG51bGwpfX19dmFyIGdmPXt9O1xuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhKXthPT09Z2Y/RShcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGM9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGQ9YS5nZXRSb290SG9zdENvbnRleHQsZT17Y3VycmVudDpnZn0sZj17Y3VycmVudDpnZn0sZz17Y3VycmVudDpnZn07cmV0dXJue2dldEhvc3RDb250ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoZS5jdXJyZW50KX0sZ2V0Um9vdEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYihnLmN1cnJlbnQpfSxwb3BIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEpe1YoZSxhKTtWKGYsYSk7VihnLGEpfSxwb3BIb3N0Q29udGV4dDpmdW5jdGlvbihhKXtmLmN1cnJlbnQ9PT1hJiYoVihlLGEpLFYoZixhKSl9LHB1c2hIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKGEsYil7VyhnLGIsYSk7Yj1kKGIpO1coZixhLGEpO1coZSxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGQ9YihnLmN1cnJlbnQpLGg9YihlLmN1cnJlbnQpO1xuZD1jKGgsYS50eXBlLGQpO2ghPT1kJiYoVyhmLGEsYSksVyhlLGQsYSkpfSxyZXNldEhvc3RDb250YWluZXI6ZnVuY3Rpb24oKXtlLmN1cnJlbnQ9Z2Y7Zy5jdXJyZW50PWdmfX19XG5mdW5jdGlvbiBqZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IFkoNSxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9ZyhiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3k9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0UoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RShcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGc9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGg9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHE9YS5oeWRyYXRlSW5zdGFuY2Usdj1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UseT1udWxsLHU9bnVsbCx6PSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3U9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3k9YTtyZXR1cm4gej0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3U9eT1udWxsO3o9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKHope3ZhciBkPXU7aWYoZCl7aWYoIWMoYSxkKSl7ZD1oKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9Mjt6PSExO3k9YTtyZXR1cm59Yih5LHUpfXk9YTt1PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6PSExLHk9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9cShhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gdihhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnkpcmV0dXJuITE7aWYoIXopcmV0dXJuIGQoYSksej0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXU7YzspYihhLGMpLGM9aChjKTtkKGEpO3U9eT9oKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBrZihhKXtmdW5jdGlvbiBiKGEpe1FiPWphPSEwO3ZhciBiPWEuc3RhdGVOb2RlO2IuY3VycmVudD09PWE/RShcIjE3N1wiKTp2b2lkIDA7Yi5pc1JlYWR5Rm9yQ29tbWl0PSExO2lkLmN1cnJlbnQ9bnVsbDtpZigxPGEuZWZmZWN0VGFnKWlmKG51bGwhPT1hLmxhc3RFZmZlY3Qpe2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE7dmFyIGM9YS5maXJzdEVmZmVjdH1lbHNlIGM9YTtlbHNlIGM9YS5maXJzdEVmZmVjdDt5ZygpO2Zvcih0PWM7bnVsbCE9PXQ7KXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dDspe3ZhciBmPXQuZWZmZWN0VGFnO2YmMTYmJnpnKHQpO2lmKGYmMTI4KXt2YXIgZz10LmFsdGVybmF0ZTtudWxsIT09ZyYmQWcoZyl9c3dpdGNoKGYmLTI0Mil7Y2FzZSAyOk5lKHQpO3QuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6TmUodCk7dC5lZmZlY3RUYWcmPS0zO09lKHQuYWx0ZXJuYXRlLHQpO2JyZWFrO2Nhc2UgNDpPZSh0LmFsdGVybmF0ZSxcbnQpO2JyZWFrO2Nhc2UgODpTYz0hMCxCZyh0KSxTYz0hMX10PXQubmV4dEVmZmVjdH19Y2F0Y2goVGMpe2Q9ITAsZT1UY31kJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGUpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1DZygpO2IuY3VycmVudD1hO2Zvcih0PWM7bnVsbCE9PXQ7KXtjPSExO2Q9dm9pZCAwO3RyeXtmb3IoO251bGwhPT10Oyl7dmFyIGs9dC5lZmZlY3RUYWc7ayYzNiYmRGcodC5hbHRlcm5hdGUsdCk7ayYxMjgmJkVnKHQpO2lmKGsmNjQpc3dpdGNoKGU9dCxmPXZvaWQgMCxudWxsIT09UiYmKGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSxudWxsPT1mJiZudWxsIT09ZS5hbHRlcm5hdGUmJihlPWUuYWx0ZXJuYXRlLGY9Ui5nZXQoZSksUltcImRlbGV0ZVwiXShlKSkpLG51bGw9PWY/RShcIjE4NFwiKTp2b2lkIDAsZS50YWcpe2Nhc2UgMjplLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaChmLmVycm9yLHtjb21wb25lbnRTdGFjazpmLmNvbXBvbmVudFN0YWNrfSk7XG5icmVhaztjYXNlIDM6bnVsbD09PWNhJiYoY2E9Zi5lcnJvcik7YnJlYWs7ZGVmYXVsdDpFKFwiMTU3XCIpfXZhciBRYz10Lm5leHRFZmZlY3Q7dC5uZXh0RWZmZWN0PW51bGw7dD1RY319Y2F0Y2goVGMpe2M9ITAsZD1UY31jJiYobnVsbD09PXQ/RShcIjE3OFwiKTp2b2lkIDAsaCh0LGQpLG51bGwhPT10JiYodD10Lm5leHRFZmZlY3QpKX1qYT1RYj0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRGUmJkRlKGEuc3RhdGVOb2RlKTtoYSYmKGhhLmZvckVhY2goRyksaGE9bnVsbCk7bnVsbCE9PWNhJiYoYT1jYSxjYT1udWxsLE9iKGEpKTtiPWIuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHFhPVI9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gYyhhKXtmb3IoOzspe3ZhciBiPUZnKGEuYWx0ZXJuYXRlLGEsSCksYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO3ZhciBlPWE7aWYoMjE0NzQ4MzY0Nz09PUh8fDIxNDc0ODM2NDchPT1lLmV4cGlyYXRpb25UaW1lKXtpZigyIT09ZS50YWcmJjMhPT1cbmUudGFnKXZhciBmPTA7ZWxzZSBmPWUudXBkYXRlUXVldWUsZj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPWcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7XG5pZihudWxsIT09YylhPWM7ZWxzZXthLnN0YXRlTm9kZS5pc1JlYWR5Rm9yQ29tbWl0PSEwO2JyZWFrfX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEpe3ZhciBiPXJnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBlKGEpe3ZhciBiPUdnKGEuYWx0ZXJuYXRlLGEsSCk7bnVsbD09PWImJihiPWMoYSkpO2lkLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmKGEpe2lmKG51bGwhPT1SKXtpZighKDA9PT1IfHxIPmEpKWlmKEg8PVVjKWZvcig7bnVsbCE9PUY7KUY9ayhGKT9lKEYpOmQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWsoRik/ZShGKTpkKEYpfWVsc2UgaWYoISgwPT09SHx8SD5hKSlpZihIPD1VYylmb3IoO251bGwhPT1GOylGPWQoRik7ZWxzZSBmb3IoO251bGwhPT1GJiYhQSgpOylGPWQoRil9ZnVuY3Rpb24gZyhhLGIpe2phP0UoXCIyNDNcIik6dm9pZCAwO2phPSEwO2EuaXNSZWFkeUZvckNvbW1pdD1cbiExO2lmKGEhPT1yYXx8YiE9PUh8fG51bGw9PT1GKXtmb3IoOy0xPGhlOylnZVtoZV09bnVsbCxoZS0tO2plPUQ7aWUuY3VycmVudD1EO1guY3VycmVudD0hMTt4KCk7cmE9YTtIPWI7Rj1zZShyYS5jdXJyZW50LG51bGwsYil9dmFyIGM9ITEsZD1udWxsO3RyeXtmKGIpfWNhdGNoKFJjKXtjPSEwLGQ9UmN9Zm9yKDtjOyl7aWYoZWIpe2NhPWQ7YnJlYWt9dmFyIGc9RjtpZihudWxsPT09ZyllYj0hMDtlbHNle3ZhciBrPWgoZyxkKTtudWxsPT09az9FKFwiMTgzXCIpOnZvaWQgMDtpZighZWIpe3RyeXtjPWs7ZD1iO2ZvcihrPWM7bnVsbCE9PWc7KXtzd2l0Y2goZy50YWcpe2Nhc2UgMjpuZShnKTticmVhaztjYXNlIDU6cWcoZyk7YnJlYWs7Y2FzZSAzOnAoZyk7YnJlYWs7Y2FzZSA0OnAoZyl9aWYoZz09PWt8fGcuYWx0ZXJuYXRlPT09aylicmVhaztnPWdbXCJyZXR1cm5cIl19Rj1lKGMpO2YoZCl9Y2F0Y2goUmMpe2M9ITA7ZD1SYztjb250aW51ZX1icmVha319fWI9Y2E7ZWI9amE9ITE7Y2E9XG5udWxsO251bGwhPT1iJiZPYihiKTtyZXR1cm4gYS5pc1JlYWR5Rm9yQ29tbWl0P2EuY3VycmVudC5hbHRlcm5hdGU6bnVsbH1mdW5jdGlvbiBoKGEsYil7dmFyIGM9aWQuY3VycmVudD1udWxsLGQ9ITEsZT0hMSxmPW51bGw7aWYoMz09PWEudGFnKWM9YSxxKGEpJiYoZWI9ITApO2Vsc2UgZm9yKHZhciBnPWFbXCJyZXR1cm5cIl07bnVsbCE9PWcmJm51bGw9PT1jOyl7Mj09PWcudGFnP1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnN0YXRlTm9kZS5jb21wb25lbnREaWRDYXRjaCYmKGQ9ITAsZj1qZChnKSxjPWcsZT0hMCk6Mz09PWcudGFnJiYoYz1nKTtpZihxKGcpKXtpZihTY3x8bnVsbCE9PWhhJiYoaGEuaGFzKGcpfHxudWxsIT09Zy5hbHRlcm5hdGUmJmhhLmhhcyhnLmFsdGVybmF0ZSkpKXJldHVybiBudWxsO2M9bnVsbDtlPSExfWc9Z1tcInJldHVyblwiXX1pZihudWxsIT09Yyl7bnVsbD09PXFhJiYocWE9bmV3IFNldCk7cWEuYWRkKGMpO3ZhciBoPVwiXCI7Zz1hO2Rve2E6c3dpdGNoKGcudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGs9XG5nLl9kZWJ1Z093bmVyLFFjPWcuX2RlYnVnU291cmNlO3ZhciBtPWpkKGcpO3ZhciBuPW51bGw7ayYmKG49amQoaykpO2s9UWM7bT1cIlxcbiAgICBpbiBcIisobXx8XCJVbmtub3duXCIpKyhrP1wiIChhdCBcIitrLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIray5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6bT1cIlwifWgrPW07Zz1nW1wicmV0dXJuXCJdfXdoaWxlKGcpO2c9aDthPWpkKGEpO251bGw9PT1SJiYoUj1uZXcgTWFwKTtiPXtjb21wb25lbnROYW1lOmEsY29tcG9uZW50U3RhY2s6ZyxlcnJvcjpiLGVycm9yQm91bmRhcnk6ZD9jLnN0YXRlTm9kZTpudWxsLGVycm9yQm91bmRhcnlGb3VuZDpkLGVycm9yQm91bmRhcnlOYW1lOmYsd2lsbFJldHJ5OmV9O1Iuc2V0KGMsYik7dHJ5e3ZhciBwPWIuZXJyb3I7cCYmcC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKHApfWNhdGNoKFZjKXtWYyYmXG5WYy5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKFZjKX1RYj8obnVsbD09PWhhJiYoaGE9bmV3IFNldCksaGEuYWRkKGMpKTpHKGMpO3JldHVybiBjfW51bGw9PT1jYSYmKGNhPWIpO3JldHVybiBudWxsfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIG51bGwhPT1SJiYoUi5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmUi5oYXMoYS5hbHRlcm5hdGUpKX1mdW5jdGlvbiBxKGEpe3JldHVybiBudWxsIT09cWEmJihxYS5oYXMoYSl8fG51bGwhPT1hLmFsdGVybmF0ZSYmcWEuaGFzKGEuYWx0ZXJuYXRlKSl9ZnVuY3Rpb24gdigpe3JldHVybiAyMCooKChJKCkrMTAwKS8yMHwwKSsxKX1mdW5jdGlvbiB5KGEpe3JldHVybiAwIT09a2E/a2E6amE/UWI/MTpIOiFIZ3x8YS5pbnRlcm5hbENvbnRleHRUYWcmMT92KCk6MX1mdW5jdGlvbiB1KGEsYil7cmV0dXJuIHooYSxiLCExKX1mdW5jdGlvbiB6KGEsYil7Zm9yKDtudWxsIT09YTspe2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxcbmEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IWphJiZjPT09cmEmJmI8SCYmKEY9cmE9bnVsbCxIPTApO3ZhciBkPWMsZT1iO1JiPklnJiZFKFwiMTg1XCIpO2lmKG51bGw9PT1kLm5leHRTY2hlZHVsZWRSb290KWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZSxudWxsPT09Tz8oc2E9Tz1kLGQubmV4dFNjaGVkdWxlZFJvb3Q9ZCk6KE89Ty5uZXh0U2NoZWR1bGVkUm9vdD1kLE8ubmV4dFNjaGVkdWxlZFJvb3Q9c2EpO2Vsc2V7dmFyIGY9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Znx8ZTxmKWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9ZX1GYXx8KGxhP1xuU2ImJihtYT1kLG5hPTEsbShtYSxuYSkpOjE9PT1lP3coMSxudWxsKTpMKGUpKTshamEmJmM9PT1yYSYmYjxIJiYoRj1yYT1udWxsLEg9MCl9ZWxzZSBicmVhazthPWFbXCJyZXR1cm5cIl19fWZ1bmN0aW9uIEcoYSl7eihhLDEsITApfWZ1bmN0aW9uIEkoKXtyZXR1cm4gVWM9KChXYygpLVBlKS8xMHwwKSsyfWZ1bmN0aW9uIEwoYSl7aWYoMCE9PVRiKXtpZihhPlRiKXJldHVybjtKZyhYYyl9dmFyIGI9V2MoKS1QZTtUYj1hO1hjPUtnKEose3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIE4oKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Tylmb3IodmFyIGM9TyxkPXNhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1PP0UoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtzYT1PPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1zYSlzYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsXG5PLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PU8pe089YztPLm5leHRTY2hlZHVsZWRSb290PXNhO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1PKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9bWE7bnVsbCE9PWMmJmM9PT1iP1JiKys6UmI9MDttYT1iO25hPWF9ZnVuY3Rpb24gSihhKXt3KDAsYSl9ZnVuY3Rpb24gdyhhLGIpe2ZiPWI7Zm9yKE4oKTtudWxsIT09bWEmJjAhPT1uYSYmKDA9PT1hfHxuYTw9YSkmJiFZYzspbShtYSxuYSksTigpO251bGwhPT1mYiYmKFRiPTAsWGM9LTEpOzAhPT1uYSYmTChuYSk7ZmI9bnVsbDtZYz0hMTtSYj0wO2lmKFViKXRocm93IGE9WmMsWmM9XG5udWxsLFViPSExLGE7fWZ1bmN0aW9uIG0oYSxjKXtGYT9FKFwiMjQ1XCIpOnZvaWQgMDtGYT0hMDtpZihjPD1JKCkpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kPyhhLmZpbmlzaGVkV29yaz1udWxsLGEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSk6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1nKGEsYyksbnVsbCE9PWQmJihhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIoZCkpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/KGEuZmluaXNoZWRXb3JrPW51bGwsYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iKGQpKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWcoYSxjKSxudWxsIT09ZCYmKEEoKT9hLmZpbmlzaGVkV29yaz1kOmEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YihkKSkpO0ZhPSExfWZ1bmN0aW9uIEEoKXtyZXR1cm4gbnVsbD09PWZifHxmYi50aW1lUmVtYWluaW5nKCk+TGc/ITE6WWM9ITB9ZnVuY3Rpb24gT2IoYSl7bnVsbD09PW1hP0UoXCIyNDZcIik6XG52b2lkIDA7bWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtVYnx8KFViPSEwLFpjPWEpfXZhciByPWhmKGEpLG49amYoYSkscD1yLnBvcEhvc3RDb250YWluZXIscWc9ci5wb3BIb3N0Q29udGV4dCx4PXIucmVzZXRIb3N0Q29udGFpbmVyLE1lPWRmKGEscixuLHUseSkscmc9TWUuYmVnaW5Xb3JrLEdnPU1lLmJlZ2luRmFpbGVkV29yayxGZz1lZihhLHIsbikuY29tcGxldGVXb3JrO3I9ZmYoYSxoKTt2YXIgemc9ci5jb21taXRSZXNldFRleHRDb250ZW50LE5lPXIuY29tbWl0UGxhY2VtZW50LEJnPXIuY29tbWl0RGVsZXRpb24sT2U9ci5jb21taXRXb3JrLERnPXIuY29tbWl0TGlmZUN5Y2xlcyxFZz1yLmNvbW1pdEF0dGFjaFJlZixBZz1yLmNvbW1pdERldGFjaFJlZixXYz1hLm5vdyxLZz1hLnNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayxKZz1hLmNhbmNlbERlZmVycmVkQ2FsbGJhY2ssSGc9YS51c2VTeW5jU2NoZWR1bGluZyx5Zz1hLnByZXBhcmVGb3JDb21taXQsQ2c9YS5yZXNldEFmdGVyQ29tbWl0LFxuUGU9V2MoKSxVYz0yLGthPTAsamE9ITEsRj1udWxsLHJhPW51bGwsSD0wLHQ9bnVsbCxSPW51bGwscWE9bnVsbCxoYT1udWxsLGNhPW51bGwsZWI9ITEsUWI9ITEsU2M9ITEsc2E9bnVsbCxPPW51bGwsVGI9MCxYYz0tMSxGYT0hMSxtYT1udWxsLG5hPTAsWWM9ITEsVWI9ITEsWmM9bnVsbCxmYj1udWxsLGxhPSExLFNiPSExLElnPTFFMyxSYj0wLExnPTE7cmV0dXJue2NvbXB1dGVBc3luY0V4cGlyYXRpb246dixjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOnksc2NoZWR1bGVXb3JrOnUsYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1sYTtsYT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsobGE9Yyl8fEZhfHx3KDEsbnVsbCl9fSx1bmJhdGNoZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe2lmKGxhJiYhU2Ipe1NiPSEwO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7U2I9ITF9fXJldHVybiBhKCl9LGZsdXNoU3luYzpmdW5jdGlvbihhKXt2YXIgYj1sYTtsYT0hMDt0cnl7YTp7dmFyIGM9XG5rYTtrYT0xO3RyeXt2YXIgZD1hKCk7YnJlYWsgYX1maW5hbGx5e2thPWN9ZD12b2lkIDB9cmV0dXJuIGR9ZmluYWxseXtsYT1iLEZhP0UoXCIxODdcIik6dm9pZCAwLHcoMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1rYTtrYT12KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtrYT1ifX19fVxuZnVuY3Rpb24gbGYoYSl7ZnVuY3Rpb24gYihhKXthPW9kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZD1hLmNvbXB1dGVBc3luY0V4cGlyYXRpb24sZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yaztyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFkoMyxudWxsLDApO2E9e2N1cnJlbnQ6Yyxjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxpc1JlYWR5Rm9yQ29tbWl0OiExLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YixuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYy5zdGF0ZU5vZGU9YX0sdXBkYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLHEpe3ZhciBnPWIuY3VycmVudDtpZihjKXtjPVxuYy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBoO2I6ezI9PT1rZChjKSYmMj09PWMudGFnP3ZvaWQgMDpFKFwiMTcwXCIpO2ZvcihoPWM7MyE9PWgudGFnOyl7aWYobGUoaCkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oaD1oW1wicmV0dXJuXCJdKT92b2lkIDA6RShcIjE3MVwiKX1oPWguc3RhdGVOb2RlLmNvbnRleHR9Yz1sZShjKT9wZShjLGgpOmh9ZWxzZSBjPUQ7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1xO2I9dm9pZCAwPT09Yj9udWxsOmI7cT1udWxsIT1hJiZudWxsIT1hLnR5cGUmJm51bGwhPWEudHlwZS5wcm90b3R5cGUmJiEwPT09YS50eXBlLnByb3RvdHlwZS51bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQ/ZCgpOmUoZyk7SGUoZyx7ZXhwaXJhdGlvblRpbWU6cSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6Yixpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsXG5uZXh0Q2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9KTtmKGcscSl9LGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sZmluZEhvc3RJbnN0YW5jZTpiLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9cGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpmdW5jdGlvbihhKXt2YXIgYz1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBDZShCKHt9LFxuYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGIoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBjP2MoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtmdW5jdGlvbiBwZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOlVlLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciBxZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHJmPXZvaWQgMDtyZj1xZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07XG52YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKGwuY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmO0JmPXFmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT15Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIENmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09Q2Ype3ZmPSExO2E9cmYoKTtpZigwPj15Zi1hKWlmKC0xIT09d2YmJndmPD1cbmEpQmYuZGlkVGltZW91dD0hMDtlbHNle3hmfHwoeGY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKERmKSk7cmV0dXJufWVsc2UgQmYuZGlkVGltZW91dD0hMTt3Zj0tMTthPXVmO3VmPW51bGw7bnVsbCE9PWEmJmEoQmYpfX0sITEpO3ZhciBEZj1mdW5jdGlvbihhKXt4Zj0hMTt2YXIgYj1hLXlmK0FmO2I8QWYmJnpmPEFmPyg4PmImJihiPTgpLEFmPWI8emY/emY6Yik6emY9Yjt5Zj1hK0FmO3ZmfHwodmY9ITAsd2luZG93LnBvc3RNZXNzYWdlKENmLFwiKlwiKSl9O3NmPWZ1bmN0aW9uKGEsYil7dWY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHdmPXJmKCkrYi50aW1lb3V0KTt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybiAwfTt0Zj1mdW5jdGlvbigpe3VmPW51bGw7dmY9ITE7d2Y9LTF9fWVsc2Ugc2Y9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdGY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHNmPWZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX19KX0pfSxcbnRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07dmFyIEVmPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxGZj17fSxHZj17fTtcbmZ1bmN0aW9uIEhmKGEpe2lmKEdmLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKEZmLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEVmLnRlc3QoYSkpcmV0dXJuIEdmW2FdPSEwO0ZmW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPXdhKGIpO2lmKGQmJnZhKGIsYykpe3ZhciBlPWQubXV0YXRpb25NZXRob2Q7ZT9lKGEsYyk6bnVsbD09Y3x8ZC5oYXNCb29sZWFuVmFsdWUmJiFjfHxkLmhhc051bWVyaWNWYWx1ZSYmaXNOYU4oYyl8fGQuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUmJjE+Y3x8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMT09PWM/SmYoYSxiKTpkLm11c3RVc2VQcm9wZXJ0eT9hW2QucHJvcGVydHlOYW1lXT1jOihiPWQuYXR0cmlidXRlTmFtZSwoZT1kLmF0dHJpYnV0ZU5hbWVzcGFjZSk/YS5zZXRBdHRyaWJ1dGVOUyhlLGIsXCJcIitjKTpkLmhhc0Jvb2xlYW5WYWx1ZXx8ZC5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlJiYhMD09PWM/YS5zZXRBdHRyaWJ1dGUoYixcIlwiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpfWVsc2UgS2YoYSxiLHZhKGIsYyk/YzpudWxsKX1cbmZ1bmN0aW9uIEtmKGEsYixjKXtIZihiKSYmKG51bGw9PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPXdhKGIpO2M/KGI9Yy5tdXRhdGlvbk1ldGhvZCk/YihhLHZvaWQgMCk6Yy5tdXN0VXNlUHJvcGVydHk/YVtjLnByb3BlcnR5TmFtZV09Yy5oYXNCb29sZWFuVmFsdWU/ITE6XCJcIjphLnJlbW92ZUF0dHJpYnV0ZShjLmF0dHJpYnV0ZU5hbWUpOmEucmVtb3ZlQXR0cmlidXRlKGIpfVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlLGQ9Yi5jaGVja2VkO3JldHVybiBCKHt0eXBlOnZvaWQgMCxzdGVwOnZvaWQgMCxtaW46dm9pZCAwLG1heDp2b2lkIDB9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLGNoZWNrZWQ6bnVsbCE9ZD9kOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIE1mKGEsYil7dmFyIGM9Yi5kZWZhdWx0VmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpudWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQsaW5pdGlhbFZhbHVlOm51bGwhPWIudmFsdWU/Yi52YWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fVxuZnVuY3Rpb24gTmYoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZJZihhLFwiY2hlY2tlZFwiLGIpfWZ1bmN0aW9uIE9mKGEsYil7TmYoYSxiKTt2YXIgYz1iLnZhbHVlO2lmKG51bGwhPWMpaWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlKWEudmFsdWU9XCIwXCI7ZWxzZSBpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZihiPXBhcnNlRmxvYXQoYS52YWx1ZSl8fDAsYyE9Ynx8Yz09YiYmYS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBudWxsPT1iLnZhbHVlJiZudWxsIT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1cIlwiK2IuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitiLmRlZmF1bHRWYWx1ZSksbnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gUGYoYSxiKXtzd2l0Y2goYi50eXBlKXtjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7Y2FzZSBcImNvbG9yXCI6Y2FzZSBcImRhdGVcIjpjYXNlIFwiZGF0ZXRpbWVcIjpjYXNlIFwiZGF0ZXRpbWUtbG9jYWxcIjpjYXNlIFwibW9udGhcIjpjYXNlIFwidGltZVwiOmNhc2UgXCJ3ZWVrXCI6YS52YWx1ZT1cIlwiO2EudmFsdWU9YS5kZWZhdWx0VmFsdWU7YnJlYWs7ZGVmYXVsdDphLnZhbHVlPWEudmFsdWV9Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uIFFmKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFJmKGEsYil7YT1CKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9UWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIFNmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gVWYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEIoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gVmYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9FKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gV2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gWGYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIFlmPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFpmKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gJGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1pmKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGFnPXZvaWQgMCxiZz1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1ZZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXthZz1hZ3x8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthZy5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9YWcuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gY2coYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBkZz17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxlZz1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoZGcpLmZvckVhY2goZnVuY3Rpb24oYSl7ZWcuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtkZ1tiXT1kZ1thXX0pfSk7XG5mdW5jdGlvbiBmZyhhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxkZy5oYXNPd25Qcm9wZXJ0eShlKSYmZGdbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgZ2c9Qih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIGhnKGEsYixjKXtiJiYoZ2dbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0UoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9FKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkUoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0UoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIGlnKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgamc9WWYuaHRtbCxrZz1DLnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gbGcoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SGQoYSk7Yj1TYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtjLmhhc093blByb3BlcnR5KGUpJiZjW2VdfHwoXCJ0b3BTY3JvbGxcIj09PWU/d2QoXCJ0b3BTY3JvbGxcIixcInNjcm9sbFwiLGEpOlwidG9wRm9jdXNcIj09PWV8fFwidG9wQmx1clwiPT09ZT8od2QoXCJ0b3BGb2N1c1wiLFwiZm9jdXNcIixhKSx3ZChcInRvcEJsdXJcIixcImJsdXJcIixhKSxjLnRvcEJsdXI9ITAsYy50b3BGb2N1cz0hMCk6XCJ0b3BDYW5jZWxcIj09PWU/KHljKFwiY2FuY2VsXCIsITApJiZ3ZChcInRvcENhbmNlbFwiLFwiY2FuY2VsXCIsYSksYy50b3BDYW5jZWw9ITApOlwidG9wQ2xvc2VcIj09PWU/KHljKFwiY2xvc2VcIiwhMCkmJndkKFwidG9wQ2xvc2VcIixcImNsb3NlXCIsYSksYy50b3BDbG9zZT0hMCk6RGQuaGFzT3duUHJvcGVydHkoZSkmJlUoZSxEZFtlXSxhKSxjW2VdPSEwKX19XG52YXIgbWc9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIix0b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIixcbnRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9O2Z1bmN0aW9uIG5nKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PWpnJiYoZD1aZihhKSk7ZD09PWpnP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gcGcoYSxiLGMsZCl7dmFyIGU9aWcoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gbWcpbWcuaGFzT3duUHJvcGVydHkoZikmJlUoZixtZ1tmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtVKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlUoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtVKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6TWYoYSxjKTtmPUxmKGEsYyk7VShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtcbmxnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1SZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO2Y9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWZihhLGMpO2Y9VWYoYSxjKTtVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpO2xnKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31oZyhiLGYsa2cpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9mZyhhLGssa2cpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmYmcoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmY2coYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmNnKGEsXG5cIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihSYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZsZyhkLGgpOmU/S2YoYSxoLGspOm51bGwhPWsmJklmKGEsaCxrKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkJjKGEpO1BmKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6QmMoYSk7WGYoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj9TZihhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmU2YoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz1cbkMpfX1cbmZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1MZihhLGMpO2Q9TGYoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPVJmKGEsYyk7ZD1SZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9Qih7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUIoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPVVmKGEsYyk7ZD1VZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfWhnKGIsZCxrZyk7dmFyIGcsaDthPW51bGw7Zm9yKGcgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShnKSYmYy5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9Y1tnXSlpZihcInN0eWxlXCI9PT1nKWZvcihoIGluIGI9Y1tnXSxiKWIuaGFzT3duUHJvcGVydHkoaCkmJihhfHwoYT17fSksYVtoXT1cblwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1nJiZcImNoaWxkcmVuXCIhPT1nJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWcmJlwiYXV0b0ZvY3VzXCIhPT1nJiYoUmEuaGFzT3duUHJvcGVydHkoZyk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGcsbnVsbCkpO2ZvcihnIGluIGQpe3ZhciBrPWRbZ107Yj1udWxsIT1jP2NbZ106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoZykmJmshPT1iJiYobnVsbCE9a3x8bnVsbCE9YikpaWYoXCJzdHlsZVwiPT09ZylpZihiKXtmb3IoaCBpbiBiKSFiLmhhc093blByb3BlcnR5KGgpfHxrJiZrLmhhc093blByb3BlcnR5KGgpfHwoYXx8KGE9e30pLGFbaF09XCJcIik7Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiZiW2hdIT09a1toXSYmKGF8fChhPXt9KSxhW2hdPWtbaF0pfWVsc2UgYXx8KGZ8fChmPVtdKSxmLnB1c2goZyxhKSksYT1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1cbmc/KGs9az9rLl9faHRtbDp2b2lkIDAsYj1iP2IuX19odG1sOnZvaWQgMCxudWxsIT1rJiZiIT09ayYmKGY9Znx8W10pLnB1c2goZyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1nP2I9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goZyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmKFJhLmhhc093blByb3BlcnR5KGcpPyhudWxsIT1rJiZsZyhlLGcpLGZ8fGI9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGcsaykpfWEmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixhKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIHRnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJk5mKGEsZSk7aWcoYyxkKTtkPWlnKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/ZmcoYSxoLGtnKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2JnKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9jZyhhLGgpOmQ/bnVsbCE9aD9LZihhLGcsaCk6YS5yZW1vdmVBdHRyaWJ1dGUoZyk6bnVsbCE9aD9JZihhLGcsaCk6SmYoYSxnKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6T2YoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpXZihhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP1NmKGEsXG4hIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1NmKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTpTZihhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiB1ZyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOlUoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBmIGluIG1nKW1nLmhhc093blByb3BlcnR5KGYpJiZVKGYsbWdbZl0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlUoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6VShcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1UoXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpVKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VShcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpVKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpNZihhLGMpO1UoXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7bGcoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpUZihhLGMpO1xuVShcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTtsZyhlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmYoYSxjKSxVKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLGxnKGUsXCJvbkNoYW5nZVwiKX1oZyhiLGMsa2cpO2Q9bnVsbDtmb3IodmFyIGcgaW4gYyljLmhhc093blByb3BlcnR5KGcpJiYoZj1jW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6UmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWYmJmxnKGUsZykpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpCYyhhKTtQZihhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkJjKGEpO1hmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiB2ZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgd2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpuZyxjcmVhdGVUZXh0Tm9kZTpvZyxzZXRJbml0aWFsUHJvcGVydGllczpwZyxkaWZmUHJvcGVydGllczpzZyx1cGRhdGVQcm9wZXJ0aWVzOnRnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6dWcsZGlmZkh5ZHJhdGVkVGV4dDp2Zyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpPZihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPXJiKGQpO2U/dm9pZCAwOkUoXCI5MFwiKTtDYyhkKTtPZihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6V2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJlNmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtuYy5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KHdnKTt2YXIgeGc9bnVsbCxNZz1udWxsO2Z1bmN0aW9uIE5nKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIE9nKGEpe2E9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbDtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZXx8IWEuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpfVxudmFyIFo9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTokZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9JGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiAkZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3hnPXRkO3ZhciBhPWRhKCk7aWYoS2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goeil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsaz0wLHE9MCx2PWEseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7diE9PWJ8fDAhPT1kJiYzIT09di5ub2RlVHlwZXx8KGc9ZitkKTt2IT09ZXx8MCE9PWMmJjMhPT12Lm5vZGVUeXBlfHwoaD1mK2MpOzM9PT12Lm5vZGVUeXBlJiYoZis9di5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9di5maXJzdENoaWxkKSlicmVhazt5PXY7dj11fWZvcig7Oyl7aWYodj09PWEpYnJlYWsgYjt5PT09YiYmKytrPT09ZCYmKGc9Zik7eT09PWUmJisrcT09PWMmJihoPWYpO2lmKG51bGwhPT0odT12Lm5leHRTaWJsaW5nKSlicmVhazt2PXk7eT12LnBhcmVudE5vZGV9dj11fWI9LTE9PT1nfHwtMT09PWg/bnVsbDpcbntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtNZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTt1ZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1NZyxiPWRhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihLZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbRWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPUpkKGMsYSk7dmFyIGY9SmQoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGc9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtnLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoZyksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGcuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShnKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2lhKGMpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPVxuYS50b3B9TWc9bnVsbDt1ZCh4Zyk7eGc9bnVsbH0sY3JlYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlKXthPW5nKGEsYixjLGQpO2FbUV09ZTthW29iXT1iO3JldHVybiBhfSxhcHBlbmRJbml0aWFsQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbjpmdW5jdGlvbihhLGIsYyxkKXtwZyhhLGIsYyxkKTthOntzd2l0Y2goYil7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjphPSEhYy5hdXRvRm9jdXM7YnJlYWsgYX1hPSExfXJldHVybiBhfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIHNnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPW9nKGEsYik7YVtRXT1kO3JldHVybiBhfSxub3c6cmYsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEpe2EuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtvYl09ZTt0ZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe2EudGV4dENvbnRlbnQ9XCJcIn0sY29tbWl0VGV4dFVwZGF0ZTpmdW5jdGlvbihhLGIsYyl7YS5ub2RlVmFsdWU9Y30sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLmFwcGVuZENoaWxkKGIpfSxhcHBlbmRDaGlsZFRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsXG5iKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKGEsYixjKXthLmluc2VydEJlZm9yZShiLGMpfSxpbnNlcnRJbkNvbnRhaW5lckJlZm9yZTpmdW5jdGlvbihhLGIsYyl7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLGMpOmEuaW5zZXJ0QmVmb3JlKGIsYyl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEsYil7YS5yZW1vdmVDaGlsZChiKX0scmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOmZ1bmN0aW9uKGEsYil7OD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOmEucmVtb3ZlQ2hpbGQoYil9fSxoeWRyYXRpb246e2Nhbkh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3JldHVybiAxIT09YS5ub2RlVHlwZXx8Yi50b0xvd2VyQ2FzZSgpIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YX0sY2FuSHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLFxuYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkOmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0saHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXthW1FdPWY7YVtvYl09YztyZXR1cm4gdWcoYSxiLGMsZSxkKX0saHlkcmF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7YVtRXT1jO3JldHVybiB2ZyhhLGIpfSxkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9fSxzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2s6c2YsY2FuY2VsRGVmZXJyZWRDYWxsYmFjazp0Zix1c2VTeW5jU2NoZWR1bGluZzohMH0pO3JjPVouYmF0Y2hlZFVwZGF0ZXM7XG5mdW5jdGlvbiBQZyhhLGIsYyxkLGUpe05nKGMpP3ZvaWQgMDpFKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKVoudXBkYXRlQ29udGFpbmVyKGIsZixhLGUpO2Vsc2V7ZD1kfHxPZyhjKTtpZighZClmb3IoZj12b2lkIDA7Zj1jLmxhc3RDaGlsZDspYy5yZW1vdmVDaGlsZChmKTt2YXIgZz1aLmNyZWF0ZUNvbnRhaW5lcihjLGQpO2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWc7Wi51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7Wi51cGRhdGVDb250YWluZXIoYixnLGEsZSl9KX1yZXR1cm4gWi5nZXRQdWJsaWNSb290SW5zdGFuY2UoZil9ZnVuY3Rpb24gUWcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtOZyhiKT92b2lkIDA6RShcIjIwMFwiKTtyZXR1cm4gcGYoYSxiLG51bGwsYyl9XG5mdW5jdGlvbiBSZyhhLGIpe3RoaXMuX3JlYWN0Um9vdENvbnRhaW5lcj1aLmNyZWF0ZUNvbnRhaW5lcihhLGIpfVJnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXtaLnVwZGF0ZUNvbnRhaW5lcihhLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGIpfTtSZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXtaLnVwZGF0ZUNvbnRhaW5lcihudWxsLHRoaXMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsLGEpfTtcbnZhciBTZz17Y3JlYXRlUG9ydGFsOlFnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFouZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RShcIjE4OFwiKTpFKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUGcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFBnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gUGcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7TmcoYSk/dm9pZCAwOlxuRShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFoudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe1BnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOlFnLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOnRjLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpaLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6Wi5mbHVzaFN5bmMsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOm1iLEV2ZW50UGx1Z2luUmVnaXN0cnk6VmEsRXZlbnRQcm9wYWdhdG9yczpDYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6cWMsUmVhY3RET01Db21wb25lbnRUcmVlOnNiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjp4ZH19O1xuWi5pbmplY3RJbnRvRGV2VG9vbHMoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnBiLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFRnPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6U2d9KSxVZz1UZyYmU2d8fFRnO21vZHVsZS5leHBvcnRzPVVnW1wiZGVmYXVsdFwiXT9VZ1tcImRlZmF1bHRcIl06VWc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjIuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxyPXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx0PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCx1PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHY9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdz1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtiPUVycm9yKGUrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fVxudmFyIHo9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEEoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8en1BLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0EucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT95KFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07QS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBCKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPW47dGhpcy51cGRhdGVyPWV8fHp9ZnVuY3Rpb24gQygpe31DLnByb3RvdHlwZT1BLnByb3RvdHlwZTt2YXIgRD1CLnByb3RvdHlwZT1uZXcgQztELmNvbnN0cnVjdG9yPUI7bShELEEucHJvdG90eXBlKTtELmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8en12YXIgRj1FLnByb3RvdHlwZT1uZXcgQztGLmNvbnN0cnVjdG9yPUU7bShGLEEucHJvdG90eXBlKTtGLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudD0hMDtGLnJlbmRlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3BzLmNoaWxkcmVufTt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsZSl7dmFyIGMsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilILmNhbGwoYixjKSYmIUkuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxsPTA7bDxmO2wrKyloW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19ZnVuY3Rpb24gSyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cn1cbmZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIEw9L1xcLysvZyxNPVtdO2Z1bmN0aW9uIE4oYSxiLGUsYyl7aWYoTS5sZW5ndGgpe3ZhciBkPU0ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBPKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+TS5sZW5ndGgmJk0ucHVzaChhKX1cbmZ1bmN0aW9uIFAoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHI6Y2FzZSB0OmNhc2UgdTpjYXNlIHY6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitRKGQsayk7Zys9UChkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1cbmYuY2FsbChhKSxrPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1EoZCxrKyspLGcrPVAoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EseShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gUihhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBTKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1QoYSxjLGUscC50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoSyhhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTCxcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6cix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFQoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTCxcIiRcXHgyNi9cIikrXCIvXCIpO2I9TihiLGcsYyxkKTtudWxsPT1hfHxQKGEsXCJcIixTLGIpO08oYil9XG52YXIgVT17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtUKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1OKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFAoYSxcIlwiLFIsYik7TyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpQKGEsXCJcIixwLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtUKGEsYixudWxsLHAudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7SyhhKT92b2lkIDA6eShcIjE0M1wiKTtyZXR1cm4gYX19LENvbXBvbmVudDpBLFB1cmVDb21wb25lbnQ6Qix1bnN0YWJsZV9Bc3luY0NvbXBvbmVudDpFLEZyYWdtZW50OncsY3JlYXRlRWxlbWVudDpKLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGM9bSh7fSxhLnByb3BzKSxcbmQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSC5jYWxsKGIsaCkmJiFJLmhhc093blByb3BlcnR5KGgpJiYoY1toXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIGw9MDtsPGg7bCsrKWZbbF09YXJndW1lbnRzW2wrMl07Yy5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpyLHR5cGU6YS50eXBlLGtleTpkLHJlZjpnLHByb3BzOmMsX293bmVyOmt9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxcbmlzVmFsaWRFbGVtZW50OkssdmVyc2lvbjpcIjE2LjIuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpHLGFzc2lnbjptfX0sVj1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlV9KSxXPVYmJlV8fFY7bW9kdWxlLmV4cG9ydHM9V1tcImRlZmF1bHRcIl0/V1tcImRlZmF1bHRcIl06VztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSdcclxuXHJcbmltcG9ydCB7QnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBOYXZMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJy8v5a+85YWl55qE5pa55byP6Lef5LmL5YmN5pyJ54K55Y+Y5YyWXHJcblxyXG5pbXBvcnQgSG9tZSBmcm9tICcuL2NvbXBvbmVudHMvSG9tZSdcclxuaW1wb3J0IE5ld3MgZnJvbSAnLi9jb21wb25lbnRzL05ld3MnXHJcblxyXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBtc2c6ICdBcHAnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbXNnIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgICAgcmV0dXJuKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgyPnttc2d9PC9oMj5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48TmF2TGluayAgZXhhY3QgdG89Jy8nPummlumhtTwvTmF2TGluaz48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxOYXZMaW5rIHRvPScvbmV3cyc+TmV3czwvTmF2TGluaz48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3V0ZS1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nLycgY29tcG9uZW50PXtIb21lfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy9uZXdzJyBjb21wb25lbnQ9e05ld3N9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvUm91dGVyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuUmVhY3REb20ucmVuZGVyKFxyXG4gICAgPEFwcCAvPixcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcclxuKSJdLCJzb3VyY2VSb290IjoiIn0=